<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Leetcode Biweekly Contest 16解题报告</title>
    <url>/posts/ab1a2dfb/</url>
    <content><![CDATA[<p>Q2两个罚时有点蛋疼，第四题还是dp不太熟，总想着搜。。来回改了好几次耽误了不少时间</p>
<a id="more"></a>

<h3 id="1299-Replace-Elements-with-Greatest-Element-on-Right-Side"><a href="#1299-Replace-Elements-with-Greatest-Element-on-Right-Side" class="headerlink" title="1299. Replace Elements with Greatest Element on Right Side"></a>1299. Replace Elements with Greatest Element on Right Side</h3><p><a href="https://leetcode.com/contest/biweekly-contest-16/problems/replace-elements-with-greatest-element-on-right-side/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>基本就是单调栈那个思路，开个变量存着就行了。</p>
<h3 id="1300-Sum-of-Mutated-Array-Closest-to-Target"><a href="#1300-Sum-of-Mutated-Array-Closest-to-Target" class="headerlink" title="1300. Sum of Mutated Array Closest to Target"></a>1300. Sum of Mutated Array Closest to Target</h3><p><a href="https://leetcode.com/contest/biweekly-contest-16/problems/sum-of-mutated-array-closest-to-target/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/3</p>
<p>一开始想写二分来着，结果二分感觉不太好处理边界就想写个$n^2$的代码赌一把，然后果断跪了2333。老老实实换回二分，对最后$l=r-1$的边界感觉很棘手一直，最后直接把在这种情况下单独判断了一下才过。</p>
<p>看别人的代码其实可以分成$[l, m-1], m, [m+1, r]$三个区间，期间一直记录最小值就可以了，思路不太灵活。</p>
<h3 id="1302-Deepest-Leaves-Sum"><a href="#1302-Deepest-Leaves-Sum" class="headerlink" title="1302. Deepest Leaves Sum"></a>1302. Deepest Leaves Sum</h3><p><a href="https://leetcode.com/contest/biweekly-contest-16/problems/deepest-leaves-sum/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>就是个bfs层次遍历，不说了。</p>
<h3 id="1301-Number-of-Paths-with-Max-Score"><a href="#1301-Number-of-Paths-with-Max-Score" class="headerlink" title="1301. Number of Paths with Max Score"></a>1301. Number of Paths with Max Score</h3><p><a href="https://leetcode.com/contest/biweekly-contest-16/problems/number-of-paths-with-max-score/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>其实就是两遍dp，第一遍从右下到左上正常求最大值，第二遍从左上到右下推次数。</p>
<p>结果从看见就想着搜。。犹豫了一会先把第一遍dp写了，然后次数又想着靠第一遍推出来的dp剪枝搜。。。冷静了一会终于想到了正解，然而时间用太多了还是没排进200。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Weekly Contest 169解题报告</title>
    <url>/posts/fd52870e/</url>
    <content><![CDATA[<p>翻车了。。。估计要掉分了。</p>
<p>十来分钟就写完了前三题，结果第四题的搜索还是写炸了，来回调试了估计有1个多小时，细节上还是注意的不够</p>
<a id="more"></a>

<h3 id="5295-Find-N-Unique-Integers-Sum-up-to-Zero"><a href="#5295-Find-N-Unique-Integers-Sum-up-to-Zero" class="headerlink" title="5295. Find N Unique Integers Sum up to Zero"></a>5295. Find N Unique Integers Sum up to Zero</h3><p><a href="https://leetcode.com/contest/weekly-contest-169/problems/find-n-unique-integers-sum-up-to-zero/" target="_blank" rel="noopener">题目</a> </p>
<p>提交次数：1/1</p>
<p>签到题，策略太多了</p>
<h3 id="5296-All-Elements-in-Two-Binary-Search-Trees"><a href="#5296-All-Elements-in-Two-Binary-Search-Trees" class="headerlink" title="5296. All Elements in Two Binary Search Trees"></a>5296. All Elements in Two Binary Search Trees</h3><p><a href="https://leetcode.com/contest/weekly-contest-169/problems/all-elements-in-two-binary-search-trees/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>遍历一遍两棵树然后排个序就行了</p>
<p>当然也可以写个中序遍历然后merge，懒得写了hh</p>
<h3 id="5297-Jump-Game-III"><a href="#5297-Jump-Game-III" class="headerlink" title="5297. Jump Game III"></a>5297. Jump Game III</h3><p><a href="https://leetcode.com/contest/weekly-contest-169/problems/jump-game-iii/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>这题倒是也不难，两个分支的搜索。看讨论说用bfs更好一点，我写的dfs的话还要加个判重，倒是不复杂但是bfs确实舒服。</p>
<h3 id="5298-Verbal-Arithmetic-Puzzle"><a href="#5298-Verbal-Arithmetic-Puzzle" class="headerlink" title="5298. Verbal Arithmetic Puzzle"></a>5298. Verbal Arithmetic Puzzle</h3><p><a href="https://leetcode.com/contest/weekly-contest-169/problems/verbal-arithmetic-puzzle/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：0/0</p>
<p>这题emmm，其实算一算可能性是搜的完的，以防万一考虑了一下优化，决定从个位开始往前顺次搜索，遇到没有对应值的字母就搜索进下一层，result的值是可以从前面推出来的。</p>
<p>思路倒是好想，结果调试各种出问题，总的来说最后找出来的有三个：</p>
<ul>
<li>进位问题：本来只用一个int来存进位，结果如果是回溯的话这个值是没有被存下来的，结果上就导致后面的进位被算在了前面。</li>
<li>回溯的时候没有正确清除足迹，这个算我蠢。。</li>
<li>可能是最大的bug来源：在一些特定分支上没有在结束后return，导致有些不应该搜索的地方被执行，结果就炸了</li>
</ul>
<p>来回基本调了一个半小时估计，也算是提个醒吧T T。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-Weekly-Contest-168解题报告</title>
    <url>/posts/51e7d609/</url>
    <content><![CDATA[<p>运气不错两次罚时还能进前200。刚做完的时候看排名还在120的样子，然后10分钟罚时过了之后就变成190了。。。题目平均难度比前几次大了点，但第四题看着难真做下来还不如第三题感觉23333细节比较多但归根结底还是个纯模拟。</p>
<a id="more"></a>



<h3 id="1295-Find-Numbers-with-Even-Number-of-Digits"><a href="#1295-Find-Numbers-with-Even-Number-of-Digits" class="headerlink" title="1295. Find Numbers with Even Number of Digits"></a>1295. Find Numbers with Even Number of Digits</h3><p><a href="https://leetcode.com/contest/weekly-contest-168/problems/find-numbers-with-even-number-of-digits/" target="_blank" rel="noopener">题目</a> </p>
<p>提交次数：1/1</p>
<p>签到题，统计位数是不是偶数，纯送。</p>
<h3 id="1296-Divide-Array-in-Sets-of-K-Consecutive-Numbers"><a href="#1296-Divide-Array-in-Sets-of-K-Consecutive-Numbers" class="headerlink" title="1296. Divide Array in Sets of K Consecutive Numbers"></a>1296. Divide Array in Sets of K Consecutive Numbers</h3><p><a href="https://leetcode.com/contest/weekly-contest-168/problems/divide-array-in-sets-of-k-consecutive-numbers/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>一开始以为是要分成k组连续数字感觉好像还有点难，结果仔细一看k是长度emmm，那就没啥好说的了，开个map每次找最小的往后数k个看有没有就行了。</p>
<h3 id="1297-Maximum-Number-of-Occurrences-of-a-Substring"><a href="#1297-Maximum-Number-of-Occurrences-of-a-Substring" class="headerlink" title="1297. Maximum Number of Occurrences of a Substring"></a>1297. Maximum Number of Occurrences of a Substring</h3><p><a href="https://leetcode.com/contest/weekly-contest-168/problems/maximum-number-of-occurrences-of-a-substring/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>这题一直在怕爆空间hhh，为了计数开了个哈希表存子串次数，然后以长度为顺序暴搜了一波，当时还想着怎么最大长度这么小，万幸没超时。</p>
<p>做完看讨论才知道其实扫一遍就可以了，那个<code>maxLetter</code>就是用来吓唬人的。因为如果一个子串出现了若干次，那么这个子串的子串出现次数一定大于等于他。所以其实只要找长度为<code>minLetter</code>的出现次数最多的子串即可，往上再多都没用。</p>
<h3 id="1298-Maximum-Candies-You-Can-Get-from-Boxes"><a href="#1298-Maximum-Candies-You-Can-Get-from-Boxes" class="headerlink" title="1298. Maximum Candies You Can Get from Boxes"></a>1298. Maximum Candies You Can Get from Boxes</h3><p><a href="https://leetcode.com/contest/weekly-contest-168/problems/maximum-candies-you-can-get-from-boxes/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>这题我说真的，刚开始看吓了一跳这都啥玩意。另外多说一句这个题的输入数据是真的反人类md。。</p>
<p>本来看那么多以为是要拓扑排序啥的找最优策略，结果看完发现原来是个模拟。。开了个队列存待开箱子，另外开两个数组存手里的钥匙和暂时打不开的箱子。不过挂了一次因为没考虑两个箱子里面互相有对方钥匙的情况，加了个开过箱子的统计就过了。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Weekly Contest 167解题报告</title>
    <url>/posts/7b48bbe/</url>
    <content><![CDATA[<p>用的时间有点长，最后一题那么明显的bfs居然写了个dfs实在没看懂emmm，超时也是意料之中了。所幸最后盯着看了半天终于想出来个剪枝过了。</p>
<a id="more"></a>

<h3 id="1290-Convert-Binary-Number-in-a-Linked-List-to-Integer"><a href="#1290-Convert-Binary-Number-in-a-Linked-List-to-Integer" class="headerlink" title="1290. Convert Binary Number in a Linked List to Integer"></a>1290. Convert Binary Number in a Linked List to Integer</h3><p><a href="https://leetcode.com/contest/weekly-contest-167/problems/convert-binary-number-in-a-linked-list-to-integer/" target="_blank" rel="noopener">题目</a> </p>
<p>提交次数：1/1</p>
<p>签到题，纯送</p>
<h3 id="1291-Sequential-Digits"><a href="#1291-Sequential-Digits" class="headerlink" title="1291. Sequential Digits"></a>1291. Sequential Digits</h3><p><a href="https://leetcode.com/contest/weekly-contest-167/problems/sequential-digits/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>dfs一路往里进就行了（估计就是在这让我第四题时对dfs挥之不去），甚至连分支都没有。找完排个序完事。</p>
<h3 id="1292-Maximum-Side-Length-of-a-Square-with-Sum-Less-than-or-Equal-to-Threshold"><a href="#1292-Maximum-Side-Length-of-a-Square-with-Sum-Less-than-or-Equal-to-Threshold" class="headerlink" title="1292. Maximum Side Length of a Square with Sum Less than or Equal to Threshold"></a>1292. Maximum Side Length of a Square with Sum Less than or Equal to Threshold</h3><p><a href="https://leetcode.com/contest/weekly-contest-167/problems/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>推导出了一个二维的前缀和，能求出来两点形成的矩形的值。边界没太理清耽误了一点时间，其他没什么了。</p>
<h3 id="1293-Shortest-Path-in-a-Grid-with-Obstacles-Elimination"><a href="#1293-Shortest-Path-in-a-Grid-with-Obstacles-Elimination" class="headerlink" title="1293. Shortest Path in a Grid with Obstacles Elimination"></a>1293. Shortest Path in a Grid with Obstacles Elimination</h3><p><a href="https://leetcode.com/contest/weekly-contest-167/problems/shortest-path-in-a-grid-with-obstacles-elimination/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>实在不知道为什么要写dfs，，还不剪枝就往上交。后来盯着想了半天还想改成dp，结果没改成方向实在有点多（现在想想可能优先按k搜能出来）。结果突然想到在每个点的时候判断一下最短路径能不能比当前答案更短，否则就返回，然后就过了emmm</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Biweekly Contest 15解题报告</title>
    <url>/posts/16d04135/</url>
    <content><![CDATA[<p>本来都不想打了，结果splatoon各种掉线实在蛋疼。于是就和cfree边吹比边做了下来，这样果然影响准确率hhh各种写完了就想交，连吃四个罚时是真的肉疼T_T</p>
<a id="more"></a>

<h3 id="1287-Element-Appearing-More-Than-25-In-Sorted-Array"><a href="#1287-Element-Appearing-More-Than-25-In-Sorted-Array" class="headerlink" title="1287. Element Appearing More Than 25% In Sorted Array"></a>1287. Element Appearing More Than 25% In Sorted Array</h3><p><a href="https://leetcode.com/contest/biweekly-contest-15/problems/element-appearing-more-than-25-in-sorted-array/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>一个哈希表统计就行了，看着more than 写了个大于等于，没救了。</p>
<h3 id="1288-Remove-Covered-Intervals"><a href="#1288-Remove-Covered-Intervals" class="headerlink" title="1288. Remove Covered Intervals"></a>1288. Remove Covered Intervals</h3><p><a href="https://leetcode.com/contest/biweekly-contest-15/problems/remove-covered-intervals/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>emmm直接$n^2$爆搜就行了，如果数据范围大一点可以考虑排个序查，$O(nlogn)$</p>
<h3 id="1286-Iterator-for-Combination"><a href="#1286-Iterator-for-Combination" class="headerlink" title="1286. Iterator for Combination"></a>1286. Iterator for Combination</h3><p><a href="https://leetcode.com/contest/biweekly-contest-15/problems/iterator-for-combination/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/3</p>
<p>这题是最后做的，办法应该有挺多，看见有人直接dfs预处理了所有排列然后挨个查就行了。我是自己找的每次从最后开始往前找，有一点欠考虑了多写了一会，想想还不如直接dfs好使。</p>
<p>有一个报错特别傻逼，因为判断写反了我还没看出来，，，</p>
<h3 id="1289-Minimum-Falling-Path-Sum-II"><a href="#1289-Minimum-Falling-Path-Sum-II" class="headerlink" title="1289. Minimum Falling Path Sum II"></a>1289. Minimum Falling Path Sum II</h3><p><a href="https://leetcode.com/contest/biweekly-contest-15/problems/minimum-falling-path-sum-ii/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>标准dp，就是瞎没看清题是上一行所有的最小当成了只能斜着走emmm，范围不大直接$n^3$暴力了，优化可以记录每一行的前两大的数，$n^2$就够了。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Weekly Contest 166解题记录</title>
    <url>/posts/7977b79/</url>
    <content><![CDATA[<p>题有点过于水了。。。40分钟做完排名300我还以为看错了。总共1k+人次完赛，这个难度不太应该。</p>
<p>值得一提的是1037那一名靠着面向测试数据编程的方式暴力过了23333，用十几次提交测出了所有测试数据（真的有啥意义。。）</p>
<a id="more"></a>

<h3 id="1281-Subtract-the-Product-and-Sum-of-Digits-of-an-Integer"><a href="#1281-Subtract-the-Product-and-Sum-of-Digits-of-an-Integer" class="headerlink" title="1281. Subtract the Product and Sum of Digits of an Integer"></a>1281. Subtract the Product and Sum of Digits of an Integer</h3><p><a href="https://leetcode.com/contest/weekly-contest-166/problems/subtract-the-product-and-sum-of-digits-of-an-integer/" target="_blank" rel="noopener">题目</a> </p>
<p>提交次数：1/1</p>
<p>签到题，数字拆分。。。为数不多的几次写完就敢直接交的。</p>
<h3 id="1282-Group-the-People-Given-the-Group-Size-They-Belong-To"><a href="#1282-Group-the-People-Given-the-Group-Size-They-Belong-To" class="headerlink" title="1282. Group the People Given the Group Size They Belong To"></a>1282. Group the People Given the Group Size They Belong To</h3><p><a href="https://leetcode.com/contest/weekly-contest-166/problems/group-the-people-given-the-group-size-they-belong-to/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>纯模拟，虽然题干说了一堆有的没的，但还是模拟。</p>
<h3 id="1283-Find-the-Smallest-Divisor-Given-a-Threshold"><a href="#1283-Find-the-Smallest-Divisor-Given-a-Threshold" class="headerlink" title="1283. Find the Smallest Divisor Given a Threshold"></a>1283. Find the Smallest Divisor Given a Threshold</h3><p><a href="https://leetcode.com/contest/weekly-contest-166/problems/find-the-smallest-divisor-given-a-threshold/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>这个曾经见过一次类似的，能够发现<code>f(x)</code>和<code>x</code>是单调增的关系，所以直接二分就行了。</p>
<h3 id="1284-Minimum-Number-of-Flips-to-Convert-Binary-Matrix-to-Zero-Matrix"><a href="#1284-Minimum-Number-of-Flips-to-Convert-Binary-Matrix-to-Zero-Matrix" class="headerlink" title="1284. Minimum Number of Flips to Convert Binary Matrix to Zero Matrix"></a>1284. Minimum Number of Flips to Convert Binary Matrix to Zero Matrix</h3><p><a href="https://leetcode.com/contest/weekly-contest-166/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>做之前看了一眼难度是6，刚开始看完题感觉搜索好像要超时，结果一看矩阵最大3*3。</p>
<p>不说了谁都别拦着我暴力</p>
<p>本来bfs是考虑记录点坐标判重的，结果发现好像有点问题做不到，就直接把矩阵哈希进去了。看了看题解可以考虑状态压缩，直接当成一个9bit的数就可以，1k都不到。</p>
<p>这题还是值得研究一下的，主要是状态压缩部分，毕竟数据量上来了不太好处理。看了看主流的讨论思路是把每一位翻不翻记录成一个数（还是状态压缩），然后对每一个状态检查他是不是把矩阵变成全0了，如果是的话就统计下计数。时间复杂度大概是$O(2^{mn}*mn)$。好像效率上和我写的差不多，但是好写emmm</p>
<p>附两个大佬代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// by nhho</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minFlips</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = x.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> m =x[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; (n * m)); i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> y = x;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n * m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &amp; (<span class="number">1</span> &lt;&lt; j)) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                <span class="keyword">int</span> a = j / m;</span><br><span class="line">                <span class="keyword">int</span> b = j % m;</span><br><span class="line">                y[a][b] ^= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (a)</span><br><span class="line">                    y[a - <span class="number">1</span>][b] ^= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (b)</span><br><span class="line">                    y[a][b - <span class="number">1</span>] ^= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (a != n - <span class="number">1</span>)</span><br><span class="line">                    y[a + <span class="number">1</span>][b] ^= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (b != m- <span class="number">1</span>)</span><br><span class="line">                    y[a][b + <span class="number">1</span>] ^= <span class="number">1</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">bool</span> ok= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; j : y)<span class="keyword">for</span> (<span class="keyword">int</span> k : j) <span class="keyword">if</span> (k)ok = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (ok &amp;&amp; (ans == <span class="number">-1</span> || cnt &lt; ans))</span><br><span class="line">                ans = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// by wifiii</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minFlips</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dir1[] = &#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> dir2[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> n = a.<span class="built_in">size</span>(), m = a[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> sz = n*m;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">1e9</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;sz;++i) &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; tmp(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(m));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j) tmp[i][j] = a[i][j];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;sz;++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;j)) &#123;</span><br><span class="line">                    <span class="keyword">int</span> x=j/m,y=j%m;</span><br><span class="line">                    tmp[x][y] = <span class="number">1</span>-tmp[x][y];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;++k) &#123;</span><br><span class="line">                        <span class="keyword">int</span> xx=x+dir1[k],yy=y+dir2[k];</span><br><span class="line">                        <span class="keyword">if</span>(xx&lt;<span class="number">0</span>||yy&lt;<span class="number">0</span>||xx&gt;=n||yy&gt;=m) <span class="keyword">continue</span>;</span><br><span class="line">                        tmp[xx][yy] = <span class="number">1</span>-tmp[xx][yy];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> ok=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j) <span class="keyword">if</span>(tmp[i][j]) ok=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(ok) ret=<span class="built_in">min</span>(ret,__builtin_popcount(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ret &gt; <span class="number">1000</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>补充：<code>int __builtin_popcount(unsigned int)</code>用于计算一个 32 位无符号整数有多少个位为1</p>
<blockquote>
<p>这个题如果扩展到$0&lt;=n,m&lt;=500$这种数据范围。只需要枚举第一行就行了</p>
</blockquote>
<p>emmm没想清楚这个是什么原因，不过确实数据范围到100感觉会很棘手，先坑着</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Hulu实习面试经历</title>
    <url>/posts/c768cc46/</url>
    <content><![CDATA[<p>蹭着2系就业部的光去hulu参观了一波，本来想问问明年暑期的事的结果听hr小姐姐说现在投实习比较容易进，回来路上纠结了一会感觉好像也不损失啥就直接找师兄投了简历</p>
<hr>
<p>更新：现场面完居然发了offer，本来以为肯定没戏了，不过听说表现是处于过与不过之间，可能是看人少就给过了，某种意义上算是捡了个漏emmm。</p>
<a id="more"></a>



<h2 id="Phone-Interview"><a href="#Phone-Interview" class="headerlink" title="Phone Interview"></a>Phone Interview</h2><p>不得不说hulu效率真的很高，第二天就联系安排电面的事了</p>
<h3 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h3><p>开场自我介绍，然后对着简历问了大概十五分钟的样子，然后开始项目轮着问。</p>
<ul>
<li>跨链部分怎么实现的，具体细节是什么，身份验证是什么样的</li>
<li><strong>讲讲goroutine</strong></li>
<li><strong>讲讲Nginx</strong></li>
<li>SM3怎么实现的，<strong>是怎么保证他的哈希性质的</strong></li>
<li>Raft的共识算法是什么意思，leader机制之类的</li>
<li>哪个项目给你的帮助最大，收获了什么</li>
</ul>
<p>标粗的基本是以后要补的，尤其需要重点看一些go的知识了。</p>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>Q1：给一个形如<code>{[[{abc(d)}]a[]]()}</code>的字符串，一对括号表示一个节点，中间均为其子节点，把这样的一棵树构造出来</p>
<p>写的时候挺慌的刚开始，没啥状态想了半天，最后干脆先硬着头写了核心部分，写的时候思路逐渐清晰了起来把剩下的写完了。感觉写的时候沟通还是太少导致面试官没太看懂我的代码，写完在跟面试官讲思路的时候还跟她重新解释了一下，中途发现了一个bug补了上去。写了大概20分钟</p>
<p>面试完跑了跑万幸没什么bug直接就能跑通。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// &#123;[[&#123;abc(d)&#125;]a[]]()&#125;</span></span><br><span class="line"><span class="comment">// &#123;abc&#125;   [(((((]))))  dp[i][j]= min(dp[i+1][j-1]+2/0 dp[i+1][j]+1 dp[i][j-1]+1) </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> val;</span><br><span class="line">    <span class="built_in">vector</span>&lt;TreeNode*&gt; child;</span><br><span class="line">    TreeNode(<span class="keyword">char</span> x): val(x), child(<span class="built_in">vector</span>&lt;TreeNode*&gt;()) &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">Solution</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s==<span class="string">""</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    TreeNode* root=<span class="keyword">new</span> TreeNode(s[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (s.length()==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; sta;</span><br><span class="line">    <span class="comment">// sta.push(0);</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.length()<span class="number">-1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i]==<span class="string">'('</span> || s[i]==<span class="string">'['</span> || s[i]==<span class="string">'&#123;'</span>) &#123;</span><br><span class="line">            sta.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[i]==<span class="string">')'</span> || s[i]==<span class="string">']'</span> || s[i]==<span class="string">'&#125;'</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> t=sta.top();</span><br><span class="line">            sta.pop();</span><br><span class="line">            <span class="keyword">if</span> (sta.empty()) &#123;</span><br><span class="line">                root-&gt;child.push_back(Solution(s.substr(t, i-t+<span class="number">1</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sta.empty() &amp;&amp; s[i]&lt;=<span class="string">'z'</span> &amp;&amp; s[i]&gt;=<span class="string">'a'</span>)</span><br><span class="line">            root-&gt;child.push_back(Solution(s.substr(i,<span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    TreeNode* root= Solution(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Q2Q3没有写代码只是说了说思路</p>
<p>Q2：如果字符串中括号存在多余或缺失情况怎么补全</p>
<p>这个如果只有一个括号还好说，但是3种括号实在是emmm一时间不知道怎么处理。想了一会给了一个暴力一点的思路：按种类统计栈中左括号个数，当遇到一个右括号的时候，首先查看栈中是否有能与他匹配的左括号，如果有就一直出栈直到匹配为止；没有就意味着这个右括号多余删掉他自己就行了。</p>
<p>说完之后感觉面试官并不是很满意这个答案，表示太暴力了于是又加了一个条件：</p>
<p>Q3：要求最少的增删次数</p>
<p>这个因为时间不多了就直接给了个dp思路来算最少次数，只想到了$O(n^2)$的区间dp思路跟她说了一下，不知道有没有更好的。</p>
<p>这个现在想了想可能有点没领会到意思，如果她是说不仅要最少次数并且还要给出一个方案的话，我这个答案明显是不太合格的。</p>
<p>最后问我有什么问题，我就大概问了下进去会干什么以及有没有分布式相关的工作，她表示他们分布式也不是很深入的只是再用。时间基本正好卡在了1小时。</p>
<h2 id="Onsite"><a href="#Onsite" class="headerlink" title="Onsite"></a>Onsite</h2><p>慌成一匹野马。。当年没学好还瞎吹的牛都是要还的，写上分布式被一顿问成傻子，，</p>
<p>邮件里hulu建议提前15分钟到，结果我提前半小时到了就在楼下坐了一会才上去。就记得当时看着各路人来人往心里不停安慰自己到现场面就达到目标了剩下无所谓了之类的，手机里刷的基础知识也没怎么看进去的样子。</p>
<h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p>上去之后联系了hr被领到了一个小屋子里，给了个mbp让我等一会面试官来。结果一面面试官迟到了10分钟的样子，我在那里没什么事就研究了一会他那个网页ide，顺便找的了他的括号补全选项打开了2333，本来还在想这个ide不好用怎么办的问题。另外随便敲了点做题模版上去。</p>
<p>一面面试官应该是个对分布式很有理解的大佬，自我介绍介绍完之后就对着raft开始问理论我就有点慌（当时就写了个实现实在是对理论没去研究）。先问对raft和paxos的理解，确实没看过paxos只好说paxos没看懂，然后问我说你看过raft论文是吧，答了一句看过（以为是要问算法逻辑，可能是说的最错的一句话），然后大佬就顺口“那你说下raft安全性证明吧”emmm，当时就感觉不太妙支支吾吾说自己知道实现但不清楚背后理论。然后甩给我一个词“Linearizability”让查资料给他解释一下，当时就开始慌了，查了一圈还查偏了不知道查了个啥玩意就说回去了，然后对应的题也就解释错了emmm。感觉面试官看不下去了有点失望给我重新解释了一遍，当时就觉得自己应该是凉了。</p>
<p>之后又对着公私钥加密问了一些，比如为什么有公私钥加密还要有对称加密之类的。本来以为自己这方面没问题的结果面试官特别喜欢问“一定是么”，一被问就开始慌。。还是基础太不熟了。这时候已经有点头大了以至于听到说做题吧的时候甚至舒了口气。。。</p>
<p>题倒是没啥难的，除了面试官不让我调试，倒是开始前随便写的代码让面试官楞了一下（然后就给全注释掉了- -）感觉他可能知道我做题比较好，看着题库一直念叨这个太简单太简单之类的搞的有点慌。结果最后给了我一个lower_bound让我实现，虽然二分搞定了但是对左闭右开的写法一直不是很能理清楚，求稳就改了一下在结尾加了个if判断。没有调试写二分实在是有点虚，被之前搞的有点怕每次面试官问我是对的么我都要重新算一遍。。。所幸结果还是对的。</p>
<p>然后看还有时间就又问了一个set的问题，问我怎么用$O(1)$的时间复杂度实现<code>set.clear()</code>，刚开始还没啥思路想尝试直接用指针来做，结果被提示说开内存也不是$O(1)$。愣了一会突然想到了加一个<code>count</code>计数就行了，不算难。写出来之后面试官看时间差不多了就撤了让我等第二个，其实这时候就感觉已经凉了emmm，心里想的都是重在参与，回去要对简历尤其分布式的多看看之类的。</p>
<h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><p>二面顺利多了，二面面试官倒是挺帅的嗯2333，一看就是健身的，似乎是被拉过来的表示自己正在回邮件没回完。也是先来了个自我介绍，然后让我介绍一下实验室的项目。开始之前我问对区块链了解的多么，结果面试官表示不是很了解然后反问这时候我该怎么办emmm。于是就重点解释了一下背景，整体来说感觉面试官对这个还是比较满意的。</p>
<p>然后做题就好多了，这个倒是让调试出来的。上来一道leetcode原题，想了一下直接秒了，感觉面试官有点没反应过来。但看起来应该我的解法还不是最优，和他想的不太一样，就一直在问我怎么再优化。这个当时有点卡住了没啥思路，面试官提示了一下就有思路了，梳理了一下思路讲了讲表示满意。做完这个面试官看了看时间还早，然后似乎心里还惦记着他的邮件emmm，感觉他看了看题库里没啥好题的样子（可能因为是平常实习不是校招没有拉满难度），问我知道拓扑排序么我表示知道，他就说行你写一个吧剩下时间都可以用来写这个，我回邮件去了233。也没太多要说的裸的算法，环的事情也跟他解释了一下就完事了。</p>
<p>二面整体很顺利了，面试官口气都感觉我已经过了的样子，然而我知道我一面什么吊样所以emmm。最后面试官问我有什么想问的，我就先问了问技术栈，他虽然讲了一下但表示这不是我需要考虑的需要啥学啥就是了。后面就在瞎聊了问了问hulu和Netflix竞争为啥都不知道hulu之类的他表示Netflix是大厂23333，看时间差不多了把我送到电梯口，表示hr会很快给结果就回去了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没问难题是个很大的因素。现场的一面暴露出来的问题太多了，自己思考深度确实不够，如果说分布式说不清还情有可原的话那密码学就是本职工作了。raft也得正经看完一遍，不然遇见懂行的暴露实在太惨。</p>
<p>hulu效率高的吓人，3点完事刚回实验室hr就来加微信表示发offer了整个人都是懵的，路上还在跟wl说一面那个样子估计凉了。只能说真就靠面试官抬一手了</p>
<p>hr小姐姐倒是很亲切23333还跟我解释为什么会这么快给offer，当时听着说面试官都给hire意见了我还没敢说话，我自己都觉得自己的现场一面有点看不下去，，，</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Hulu</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Weekly Contest 165解题记录</title>
    <url>/posts/ba5d17b7/</url>
    <content><![CDATA[<p>事实证明罚时非常重要，多测两下比吃个罚时强多了。。题倒是不难，但三个罚时直接排名掉了100，本来能进200的，难受。</p>
<a id="more"></a>

<h3 id="1275-Find-Winner-on-a-Tic-Tac-Toe-Game"><a href="#1275-Find-Winner-on-a-Tic-Tac-Toe-Game" class="headerlink" title="1275. Find Winner on a Tic Tac Toe Game"></a>1275. Find Winner on a Tic Tac Toe Game</h3><p><a href="https://leetcode.com/contest/weekly-contest-165/problems/find-winner-on-a-tic-tac-toe-game/" target="_blank" rel="noopener">题目</a> </p>
<p>提交次数：1/3</p>
<p>这题刚开始一直报一个莫名其妙的报错，最后也不知道发生了啥搁那折腾了快20分钟。然后就吃俩罚时。。事实证明给的测试样例起码要测全。。</p>
<h3 id="1276-Number-of-Burgers-with-No-Waste-of-Ingredients"><a href="#1276-Number-of-Burgers-with-No-Waste-of-Ingredients" class="headerlink" title="1276. Number of Burgers with No Waste of Ingredients"></a>1276. Number of Burgers with No Waste of Ingredients</h3><p><a href="https://leetcode.com/contest/weekly-contest-165/problems/number-of-burgers-with-no-waste-of-ingredients/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>这题实在过分了，看完发现是个二元一次方程，闹呢</p>
<h3 id="1277-Count-Square-Submatrices-with-All-Ones"><a href="#1277-Count-Square-Submatrices-with-All-Ones" class="headerlink" title="1277. Count Square Submatrices with All Ones"></a>1277. Count Square Submatrices with All Ones</h3><p><a href="https://leetcode.com/contest/weekly-contest-165/problems/count-square-submatrices-with-all-ones/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>比那个找矩阵的好点，<code>dp[i][j]</code>记录以这个点为右下角的最大正方形的边长，然后把所有加一块就行了。</p>
<p>吃了个罚时，因为没有判定这个点自己是不是<code>1</code>，有点蠢</p>
<h3 id="1278-Palindrome-Partitioning-III"><a href="#1278-Palindrome-Partitioning-III" class="headerlink" title="1278. Palindrome Partitioning III"></a>1278. Palindrome Partitioning III</h3><p><a href="https://leetcode.com/contest/weekly-contest-165/problems/palindrome-partitioning-iii/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>比较基础的dp，考虑到对一段固定的字符串来说替换成回文串次数是固定的，所以<code>dp[i][k]</code>记录前<code>i</code>个被分成了<code>k</code>段之后的最小替换次数，然后<code>j</code>遍历<code>1-i</code>来推就可以了。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Biweekly Contest 14解题记录</title>
    <url>/posts/16f3b1f2/</url>
    <content><![CDATA[<p>被第三题搞的头大，拖了好久结果没时间做Q4。其实讲道理第三题不难爆搜完全能过，就是自己一直不太想写爆搜结果出了好多问题。当然第四题讲道理15分钟其实够了，感觉自己二分还是不熟练每次边界都要调好久。</p>
<a id="more"></a>

<h3 id="1271-Hexspeak"><a href="#1271-Hexspeak" class="headerlink" title="1271. Hexspeak"></a>1271. Hexspeak</h3><p><a href="https://leetcode.com/contest/biweekly-contest-14/problems/hexspeak/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>真签到题，16进制转换，实在没啥说的。</p>
<h3 id="1272-Remove-Interval"><a href="#1272-Remove-Interval" class="headerlink" title="1272. Remove Interval"></a>1272. Remove Interval</h3><p><a href="https://leetcode.com/contest/biweekly-contest-14/problems/remove-interval/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>这题也不难，跑一遍区间判断一下重合度就可以了</p>
<h3 id="1273-Delete-Tree-Nodes"><a href="#1273-Delete-Tree-Nodes" class="headerlink" title="1273. Delete Tree Nodes"></a>1273. Delete Tree Nodes</h3><p><a href="https://leetcode.com/contest/biweekly-contest-13/problems/synonymous-sentences/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>这题看了看觉得不用构造邻接表去存孩子（然后就坑了），一开始思路是一遍遍搜索叶子节点，把不是0的叶子权重加到他父节点上。中途发现还需要记录每个节点的总孩子个数来删节点，头就有点乱写了半天才出来。然后就没想到被测试数据坑了，一直以为是第一个数据有问题结果是第二个的问题，在那查了半天也没看出来。。。</p>
<p>事实证明测试数据过一个添一个，出错的时候还是一个个来比较好。</p>
<h3 id="1274-Number-of-Ships-in-a-Rectangle"><a href="#1274-Number-of-Ships-in-a-Rectangle" class="headerlink" title="1274. Number of Ships in a Rectangle"></a>1274. Number of Ships in a Rectangle</h3><p><a href="https://leetcode.com/contest/biweekly-contest-14/problems/number-of-ships-in-a-rectangle/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：0/0</p>
<p>刚开始看见什么互动问题吓了一跳就先做第三题去了，回头看看这一题真的不难，算了一下次数二分是绝对够用的，每次分成4个区域走下去就可以了，如果这个区域是false直接返回，否则直到找到那个点为止。</p>
<p>主要还是对边界没有理清，加上被第三题搞的心态有点炸，就出现了很多边角的细节问题。到时间了之后反而冷静了下来10分钟调出来了。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>C++: 模板类编译过程中出现“undefined reference to”问题</title>
    <url>/posts/bfee53d1/</url>
    <content><![CDATA[<p>C++在使用模版（template）类的时候，如果像通常那样将类成员函数的声明和实现分别放在<code>.h</code>和<code>.cpp</code>中，会导致在编译时会报错<code>undefined reference to</code>，找不到对应成员函数。</p>
<a id="more"></a>

<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在实现一个模板类的时候遇到了一个问题：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Matrix.h</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    Matrix(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;T&gt;&gt; &amp;matrix);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Matrix.cpp</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Matrix&lt;T&gt;::Matrix(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;T&gt;&gt; &amp;matrix) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> Matrix&lt;T&gt;::<span class="built_in">display</span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line">Matrix&lt;<span class="keyword">int</span>&gt; base(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>(<span class="keyword">int</span>)&gt; m);</span><br><span class="line">base.<span class="built_in">display</span>();</span><br></pre></td></tr></table></figure>

<p>编译时会报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CMakeFiles\AlgorithmWarehouse.dir/objects.a(main.cpp.obj): In function `main&apos;:</span><br><span class="line">./main.cpp:75: undefined reference to `Matrix&lt;int&gt;::Matrix(std::vector&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;&amp;)&apos;</span><br><span class="line">./main.cpp:76: undefined reference to `Matrix&lt;int&gt;::display()&apos;</span><br></pre></td></tr></table></figure>

<p>很迷不知道为什么会找不到构造函数，查了一圈确定是因为使用<code>template&lt;typename T&gt;</code>的原因，总结一下。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>下面使用一个简单的例子来叙述这个问题：假设要实现一个栈，有两个文件<code>Stack.h</code>和<code>Stack.cpp</code>，栈声明使用<code>template&lt;typename T&gt;</code>，<code>main.cpp</code>在<code>import &quot;Stack.h&quot;</code>后调用这个类。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Stack.h</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(...)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stack.cpp</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> Stack&lt;T&gt;::push() &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"Stack.h"</span></span><br><span class="line">Stack&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">s.push(...);</span><br></pre></td></tr></table></figure>

<p>编译下来会报错：<code>undefined reference to</code></p>
<p>因为<code>template</code>其实是一种类似语法糖的东西，C++中每一个对象所占用的空间大小，是在编译的时候就确定的，在模板类没有真正的被使用之前，编译器是无法知道，模板类中使用模板类型的对象的所占用的空间的大小的。只有模板被真正使用的时候，编译器才知道，模板套用的是什么类型，应该分配多少空间。这也就是模板类为什么只是称之为模板，而不是泛型的缘故。</p>
<p>既然是在编译的时候，根据套用的不同类型进行编译，那么，套用不同类型的模板类实际上就是两个不同的类型，也就是说，<code>stack&lt;int&gt;</code>和<code>stack&lt;char&gt;</code>是两个不同的数据类型，他们共同的成员函数也不是同一个函数，只不过具有相似的功能罢了。</p>
<p>所以模版本质其实和宏差不多，不同于原本的类型定义。编译器在编译<code>main.cpp</code>时会根据需要隐式实例化诸如 <code>Stack&lt;int&gt;</code>，如果这个实例并没有在<code>main.cpp</code>中，编译器就会根据include去找，但是显然编译时<code>Stack.h</code>中并没有对<code>Stack&lt;int&gt;</code>的声明，于是就报错了。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="显式声明"><a href="#显式声明" class="headerlink" title="显式声明"></a>显式声明</h3><p>在<code>Stack.cpp</code>中显式声明会用到的类型：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;int&gt;;</span></span><br><span class="line"><span class="keyword">template</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;std::string&gt;;</span></span><br></pre></td></tr></table></figure>

<p>我认为的最好的办法，但缺点也很显然，如果需要一种新的数据类型就很难受，必须手动再添加，封装上不太友好。</p>
<h3 id="全放到头文件中"><a href="#全放到头文件中" class="headerlink" title="全放到头文件中"></a>全放到头文件中</h3><p>很直接，把所有<code>Stack.cpp</code>中的源代码全放到<code>Stack.h</code>中，不需要进行任何修改。但缺点就是如果这个头文件在很多文件中被使用的话，会影响编译速度，但不会产生任何链接问题，因为编译器会忽略重复实现。</p>
<h3 id="把实现代码移至一个新头文件中"><a href="#把实现代码移至一个新头文件中" class="headerlink" title="把实现代码移至一个新头文件中"></a>把实现代码移至一个新头文件中</h3><p>把<code>Stack.cpp</code>改为<code>Stack_impl.h</code>，然后在<code>Stack.h</code>里面<code>import &quot;Stack_impl.h&quot;</code>，这样能保证代码实现和声明在不同的文件中，但本质上和上一个解决办法是一样的。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>代码学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Weekly Contest 164解题记录</title>
    <url>/posts/67cbce32/</url>
    <content><![CDATA[<p>水题四道emmm，还算不错40分钟做完了，侥幸进了前200</p>
<a id="more"></a>

<p><a href="https://github.com/Itachi666/AlgorithmWarehouse/tree/master/LeetcodeContest/WeeklyContest164" target="_blank" rel="noopener">代码在这里</a></p>
<h3 id="1266-Minimum-Time-Visiting-All-Points"><a href="#1266-Minimum-Time-Visiting-All-Points" class="headerlink" title="1266. Minimum Time Visiting All Points"></a>1266. Minimum Time Visiting All Points</h3><p><a href="https://leetcode.com/contest/weekly-contest-164/problems/minimum-time-visiting-all-points/" target="_blank" rel="noopener">题目</a> </p>
<p>提交次数：1/1</p>
<p>两点路线固定，还按顺序，直接算就行了。</p>
<h3 id="1267-Count-Servers-that-Communicate"><a href="#1267-Count-Servers-that-Communicate" class="headerlink" title="1267. Count Servers that Communicate"></a>1267. Count Servers that Communicate</h3><p><a href="https://leetcode.com/contest/weekly-contest-164/problems/count-servers-that-communicate/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>开两个数组记录每行每列各有多少个机器就行了。</p>
<p>本来想尝试一次扫描搞定来着，看了看数据范围也不大不打算耽误多长时间了，就直接暴力了。</p>
<h3 id="1268-Greatest-Sum-Divisible-by-Three"><a href="#1268-Greatest-Sum-Divisible-by-Three" class="headerlink" title="1268. Greatest Sum Divisible by Three"></a>1268. Greatest Sum Divisible by Three</h3><p><a href="https://leetcode.com/contest/weekly-contest-164/problems/search-suggestions-system/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>最后写的这道题，看见这种一堆words的就头疼。。</p>
<p>数据范围不大直接写的暴力，单词每加一个字母得到的搜索结果肯定是上一个搜索结果里面的，最后输出前把记录取前三个就行了。</p>
<p>看了看题解似乎是想让用字典树，真的这个数据范围太弱了加俩零应该就没啥问题了。。字典树的问题在于会自动去重，要在叶子的地方做一些处理。</p>
<h3 id="1269-Number-of-Ways-to-Stay-in-the-Same-Place-After-Some-Steps"><a href="#1269-Number-of-Ways-to-Stay-in-the-Same-Place-After-Some-Steps" class="headerlink" title="1269. Number of Ways to Stay in the Same Place After Some Steps"></a>1269. Number of Ways to Stay in the Same Place After Some Steps</h3><p><a href="https://leetcode.com/contest/weekly-contest-164/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>不知道见多少次的dp了，<code>arrLen</code>看着挺吓人但其实也就那么回事，只要<code>steps</code>不高压根就走不过去。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Go的Function types学习</title>
    <url>/posts/b617895a/</url>
    <content><![CDATA[<p>翻Fabric源码的时候看到了一个<code>type ChannelProvider func() (Channel, error)</code>，半天没看懂是个啥，查了一下发现是go的<a href="https://golang.org/ref/spec#Function_types" target="_blank" rel="noopener">Function types</a>语法，于是记录一下。</p>
<a id="more"></a>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>起因是在翻Fabric sdk创建的时候发现<code>New</code>函数很明显有一个<code>channelProvider</code>函数参数，</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(channelProvider context.ChannelProvider, opts ...ClientOption)</span> <span class="params">(*Client, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	channelContext, err := channelProvider()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.WithMessage(err, <span class="string">"failed to create channel context"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但找了一下定义发现是这么一个东西：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ChannelProvider returns channel client context</span></span><br><span class="line"><span class="keyword">type</span> ChannelProvider <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(Channel, error)</span></span></span><br></pre></td></tr></table></figure>

<p>而调用过程是这样的：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ChannelContext creates and returns channel context</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sdk *FabricSDK)</span> <span class="title">ChannelContext</span><span class="params">(channelID <span class="keyword">string</span>, options ...ContextOption)</span> <span class="title">contextApi</span>.<span class="title">ChannelProvider</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	channelProvider := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(contextApi.Channel, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">		clientCtxProvider := sdk.Context(options...)</span><br><span class="line">		<span class="keyword">return</span> context.NewChannel(clientCtxProvider, channelID)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> channelProvider</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clientChannelContext := sdk.ChannelContext(initInfo.ChannelID, fabsdk.WithUser(initInfo.UserName), fabsdk.WithOrg(initInfo.OrgName))</span><br><span class="line">	</span><br><span class="line">channelClient, err := channel.New(clientChannelContext)</span><br></pre></td></tr></table></figure>

<h2 id="Function-Types"><a href="#Function-Types" class="headerlink" title="Function Types"></a>Function Types</h2><p>官方文档在<a href="https://golang.org/ref/spec#Function_types" target="_blank" rel="noopener">这里</a>，对其的定义是：</p>
<blockquote>
<p>A function type denotes the set of all functions with the same parameter and result types. </p>
</blockquote>
<p>首先来看一个例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Greeting function types</span></span><br><span class="line"><span class="keyword">type</span> Greeting <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(g Greeting, n <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(g(n))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">english</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    say(english, <span class="string">"World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>say()</code>函数要求一个<code>Greeting</code>类型的函数参数，而<code>english()</code>函数由于参数输入输出均与<code>Greeting</code>类型相同，因此便能够作为参数传入<code>say()</code>中。</p>
<p>我的理解是这样定义了一个函数类型或者说函数集合，同样输入输出的函数被归为一类，感觉和go的Interface设计理念有点类似，只要函数接口相同就能够传入。</p>
<p>把上面的例子进一步扩展一下的话：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Greeting function types</span></span><br><span class="line"><span class="keyword">type</span> Greeting <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g Greeting)</span> <span class="title">say</span><span class="params">(n <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(g(n))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">english</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">french</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Bonjour, "</span> + name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    g := Greeting(english)</span><br><span class="line">    g.say(<span class="string">"World"</span>)</span><br><span class="line">    g = Greeting(french)</span><br><span class="line">    g.say(<span class="string">"World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello, World</span><br><span class="line">Bonjour, World</span><br></pre></td></tr></table></figure>

<p>这就有点类的意思了。一开始先把<code>func(name string) string</code>这样的函数声明成<code>Greeting</code>类型，接着通过<code>Greeting(english)</code>将<code>english</code>函数转换成<code>Greeting</code>类型（类似强制类型转换）。通过这个转换以后，就可以借由变量<code>g</code>调用<code>Greeting</code>类型的<code>say()</code>方法。<code>Greeting(french)</code>同理。</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>代码学习</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Kickstart 2019 Round H参赛记录与解题思路</title>
    <url>/posts/65c9cf54/</url>
    <content><![CDATA[<p>用了一星期刷了一下今年的前几轮题，虽然感受到了这些轮数之间题目难度幅度差别有点大，但大概没想到最后结果会是惨败。打完直接自闭了。。。想了想还是记录一下吧，希望明年能成功混一件衣服回来。</p>
<p>题解代码等这两天补上。</p>
<a id="more"></a>

<p><img src="https://tvax2.sinaimg.cn/large/890e0d7bgy1g93oizf7o8j21520objtb.jpg" alt=""></p>
<p><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050edd" target="_blank" rel="noopener">比赛链接</a></p>
<h2 id="Q1-H-index"><a href="#Q1-H-index" class="headerlink" title="Q1: H-index"></a>Q1: H-index</h2><p>题目大意：一个人发表了n篇文章，每一个文章具有一个影响因子<code>A[i]</code>，如果一个人有h篇文章的影响因子都大于等于h，则这个人的H-index就是h。根据发表的文章顺序，问每一篇文章发表后这个人的H-index都变为了多少。</p>
<p>刚开始看见小数据集只有5分的时候就有点感觉不妙，暴力写了一个交了然后开始研究大数据集，然后卡在了怎么来维护这么一个数据范围上。显然$10^5$的数据范围肯定是要$O(log n)$级别的维护，但尝试了二分插入等方法之后还是不知所措。</p>
<p>看过答案之后感觉其实是有暗示的，$O(log n)$级别的数据维护其实没几个，该想到用最小堆维护的。</p>
<h2 id="Q2-Diagonal-Puzzle"><a href="#Q2-Diagonal-Puzzle" class="headerlink" title="Q2: Diagonal Puzzle"></a>Q2: Diagonal Puzzle</h2><p>题目大意：一个n*n的矩阵，每个矩阵中有一个白色棋子或黑色棋子，每一次可以选择一条斜的对角线（左右均可）来让一行棋子翻转，类似黑白棋。问最少多少次操作能够使全部棋子变黑。</p>
<p>这题中途看了一眼通过率吓了一跳，比第三题还低。小数据集很明显是让暴力搜索的，可以分析出每一个对角线至多只会翻转一次，写了一个BFS结果一直在爆空间，调了一会之后心态就炸了。现在想想可能写个dfs更好一点。</p>
<p>大数据集的第一个题解说实话我没怎么看懂。。但是第二个题解还是看懂了的，很巧妙的思路，将矩阵问题变成了一个二色染色图来搜索</p>
<h2 id="Q3-Elevanagram"><a href="#Q3-Elevanagram" class="headerlink" title="Q3: Elevanagram"></a>Q3: Elevanagram</h2><p>题目大意：给若干个1-9，问这些是否能够组成一个11的倍数。11的倍数满足<br>$$<br>（奇数位的和-偶数位的和）mod \space 11=0<br>$$<br>这题大概是心态最炸的，上午刚刚做完这么一个类似的dp，下午就不记得了。用<code>dp[i][j](0&lt;=j&lt;=11)</code>表示前面<code>i</code>个数分别在模11余<code>j</code>时是否存在，然后顺次递推就可以了。</p>
<p>至于大数据集其实可以偷鸡，如果某个数的个数大于20就把他减少至20以内，事实证明是过的去的。</p>
<p>其实中途曾经尝试考虑过这种思路，但结果上emmm，不知道怎么就给否了，很轻易的否了。。。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
        <category>Google</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Kickstart</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Weekly Contest 163解题记录</title>
    <url>/posts/1ab8c86a/</url>
    <content><![CDATA[<p>头天晚上睡得太晚硬是睡过了。。迟到了半小时开始做，结果只做出来了两道。但没想到排名直接掉了40+，这掉的也太多了。。事实证明刚爬起来就不要瞎搞什么动脑子的活动。</p>
<a id="more"></a>

<p><a href="https://github.com/Itachi666/AlgorithmWarehouse/tree/master/LeetcodeContest/WeeklyContest163" target="_blank" rel="noopener">代码在这里</a></p>
<h3 id="1260-Shift-2D-Grid"><a href="#1260-Shift-2D-Grid" class="headerlink" title="1260. Shift 2D Grid"></a>1260. Shift 2D Grid</h3><p><a href="https://leetcode.com/contest/weekly-contest-163/problems/shift-2d-grid/" target="_blank" rel="noopener">题目</a> </p>
<p>提交次数：1/1</p>
<p>刚开始看成矩阵旋转，写了一会发现看错题直接暴力模拟了，看题解说可以把这个矩阵拉成线性数组移位之后在放回去。</p>
<h3 id="1261-Find-Elements-in-a-Contaminated-Binary-Tree"><a href="#1261-Find-Elements-in-a-Contaminated-Binary-Tree" class="headerlink" title="1261. Find Elements in a Contaminated Binary Tree"></a>1261. Find Elements in a Contaminated Binary Tree</h3><p><a href="https://leetcode.com/contest/weekly-contest-163/problems/find-elements-in-a-contaminated-binary-tree/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>简单的树的遍历操作，没啥好说的</p>
<h3 id="1262-Greatest-Sum-Divisible-by-Three"><a href="#1262-Greatest-Sum-Divisible-by-Three" class="headerlink" title="1262. Greatest Sum Divisible by Three"></a>1262. Greatest Sum Divisible by Three</h3><p><a href="https://leetcode.com/contest/weekly-contest-162/problems/number-of-closed-islands/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：0/5？</p>
<p>难不难不好说，写这题的时候脑子简直一坨浆糊。。更没想到的是这题的dp思路和下午的Kickstart思路相同。。这个就留着那篇再说吧</p>
<p>忘了一开始怎么想的了，好像一直在贪心结果被各种特例吊打逐渐心态就崩了</p>
<p>两种做法：第一种很简单，求和取模，如果模3余1就找到最小的模3余1的值或者最小的两个模3余2的值，模3余2亦然。</p>
<p>另一种就是dp思路：<code>dp[i][j]</code> 表示前<code>i</code>个元素在模3余0，1，2的最大值，状态转移方程就有：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">dp[i+<span class="number">1</span>][(j + nums[i])%<span class="number">3</span>] = <span class="built_in">max</span>(dp[i][(j + nums[i])%<span class="number">3</span>], dp[i][j]+nums[i])</span><br></pre></td></tr></table></figure>



<h3 id="1263-Minimum-Moves-to-Move-a-Box-to-Their-Target-Location"><a href="#1263-Minimum-Moves-to-Move-a-Box-to-Their-Target-Location" class="headerlink" title="1263. Minimum Moves to Move a Box to Their Target Location"></a>1263. Minimum Moves to Move a Box to Their Target Location</h3><p><a href="https://leetcode.com/contest/weekly-contest-162/problems/maximum-score-words-formed-by-letters/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：0/?</p>
<p>最开始看到感觉代码量挺大的，最后补一下事实上也确实代码量挺大的emmmm</p>
<p>双重染色问题，两个BFS搞定了。</p>
<p>首先第一重BFS来记录推箱子，分别记录箱子的位置和人的位置。在每一个状态中，以人的位置为起点进行一次BFS遍历染色，找出所有人能够在不推箱子的情况下走到的位置，如果这个位置能够推箱子，就把他加入第一重BFS中。</p>
<p>但是坑在于如何记录箱子的移动，也就是去重。</p>
<p>一开始我是直接以记录箱子位置来判重，但是实际上会出现需要人先把箱子推过去后过去然后再推回来的情况。尝试删除这个判重结果果然爆炸，最后看数据范围直接开了个四重数组来记录人和箱子的位置来解决的。想了想可以简化一下，三维数组来记录箱子的位置和方向，应该也是可以的。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Biweekly Contest 13解题记录</title>
    <url>/posts/6b80b7aa/</url>
    <content><![CDATA[<p>这次双周赛居然有三个medium，快结束了打完都能差点进了200（其实能进但罚时超了，，</p>
<a id="more"></a>

<p><a href="https://github.com/Itachi666/AlgorithmWarehouse/tree/master/LeetcodeContest/WeeklyContest163" target="_blank" rel="noopener">代码在这里</a></p>
<h3 id="1256-Encode-Number"><a href="#1256-Encode-Number" class="headerlink" title="1256. Encode Number"></a>1256. Encode Number</h3><p><a href="https://leetcode.com/contest/biweekly-contest-13/problems/encode-number/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>好几种办法吧，最简单的应该就是 $n+1$ 的二进制去掉首位了。</p>
<p>刚开始没想到，就看出来好像是以 $2^n$ 循环，写的有点复杂。</p>
<h3 id="1257-Smallest-Common-Region"><a href="#1257-Smallest-Common-Region" class="headerlink" title="1257. Smallest Common Region"></a>1257. Smallest Common Region</h3><p><a href="https://leetcode.com/contest/biweekly-contest-13/problems/smallest-common-region/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>不能算难，但挺麻烦的。想了想构造了一棵树，然后顺着一个节点往上搜就可以了，还好数据量不大，用两个哈希表可以存下。</p>
<h3 id="1258-Synonymous-Sentences"><a href="#1258-Synonymous-Sentences" class="headerlink" title="1258. Synonymous Sentences"></a>1258. Synonymous Sentences</h3><p><a href="https://leetcode.com/contest/biweekly-contest-13/problems/synonymous-sentences/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>代码量有点大，wa了一次在误以为同义词的长度相同上。</p>
<p>刚开始看数据当成了同义词只会有两个，写完发现虽然是给的每一组两个同义词，但不同组之间也可以有相同的词，也就是说可以同时有好几个单词互相是同义词。</p>
<p>emmm就有点麻烦，被迫实现了一个并查集来统计。</p>
<p>其他的就没什么了，一个dfs搞定。</p>
<h3 id="1259-Handshakes-That-Don’t-Cross"><a href="#1259-Handshakes-That-Don’t-Cross" class="headerlink" title="1259. Handshakes That Don’t Cross"></a>1259. Handshakes That Don’t Cross</h3><p><a href="https://leetcode.com/contest/biweekly-contest-13/problems/handshakes-that-dont-cross/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>想了想认出来了dp。</p>
<p><code>dp[i]</code>表示<code>2*i</code>个人的数量，枚举和1号节点连接的点<code>j=2,4,...,2*i</code>，这样剩下的就分成了两组<code>j-2</code>和<code>i*2-j</code>，乘起来就行了。</p>
<p>wa了一次没有对答案取余。。。不然就进200了T T</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌KickStart题目索引整理</title>
    <url>/posts/537758fd/</url>
    <content><![CDATA[<p>发现做完今年的H轮之后Kickstart的时间表就更新成明年的了。。虽然H轮做的一坨屎但还是要回顾一下的。看了看网址都还在也能回去练习，只是没有索引了，就干脆整理一下方便回顾。</p>
<a id="more"></a>

<p>前期整理来自于<a href="https://github.com/amylmy/KickStart-GoogleCompetition" target="_blank" rel="noopener">amylmy</a></p>
<p>蠢了谷歌还是有整合的：<a href="https://codingcompetitions.withgoogle.com/kickstart/archive/2019" target="_blank" rel="noopener">Kickstart 2019</a>，但试了试18年之前的好像不太行。</p>
<h3 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h3><h4 id="Round-H"><a href="#Round-H" class="headerlink" title="Round H"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050edd" target="_blank" rel="noopener">Round H</a></h4><ul>
<li>H-index</li>
<li>Diagonal Puzzle</li>
<li>Elevanagram</li>
</ul>
<h4 id="Round-G"><a href="#Round-G" class="headerlink" title="Round G"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000051066" target="_blank" rel="noopener">Round G</a></h4><ul>
<li>Product Triplets </li>
<li>Combining Classes</li>
<li>Cave Escape</li>
</ul>
<h4 id="Round-F"><a href="#Round-F" class="headerlink" title="Round F"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050edc" target="_blank" rel="noopener">Round F</a></h4><ul>
<li>Flattening</li>
<li>Teach Me</li>
<li>Spectating Villages</li>
</ul>
<h4 id="Round-E"><a href="#Round-E" class="headerlink" title="Round E"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050edb" target="_blank" rel="noopener">Round E</a></h4><ul>
<li>Cherries Mesh </li>
<li>Code-Eat Switcher </li>
<li>Street Checkers </li>
</ul>
<h4 id="Round-D"><a href="#Round-D" class="headerlink" title="Round D"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000051061" target="_blank" rel="noopener">Round D</a></h4><ul>
<li>X or What?</li>
<li>Latest Guests</li>
<li>Food Stalls</li>
</ul>
<h4 id="Round-C"><a href="#Round-C" class="headerlink" title="Round C"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050ff2" target="_blank" rel="noopener">Round C</a></h4><ul>
<li>Wiggle Walk</li>
<li>Circuit Board</li>
<li>Catch Some</li>
</ul>
<h4 id="Round-B"><a href="#Round-B" class="headerlink" title="Round B"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050eda" target="_blank" rel="noopener">Round B</a></h4><ul>
<li>Building Palindromes</li>
<li>Energy Stones</li>
<li>Diverse Subarray</li>
</ul>
<h4 id="Round-A"><a href="#Round-A" class="headerlink" title="Round A"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050e01" target="_blank" rel="noopener">Round A</a></h4><ul>
<li>Training</li>
<li>Parcels</li>
<li>Contention</li>
</ul>
<h4 id="Practice-Round"><a href="#Practice-Round" class="headerlink" title="Practice Round"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000051060" target="_blank" rel="noopener">Practice Round</a></h4><ul>
<li>Guessing Number (平台热身)</li>
<li>Mural （同2018-H轮-B题）</li>
<li>Kickstart Alarm （同2018-C轮-C题）</li>
</ul>
<h3 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h3><h4 id="Practice-Round-1"><a href="#Practice-Round-1" class="headerlink" title="Practice Round"></a><a href="https://code.google.com/codejam/contest/4374486/dashboard" target="_blank" rel="noopener">Practice Round</a></h4><ul>
<li>Problem A. GBus count</li>
<li>Problem B. Googol String</li>
<li>Problem C. Sort a scrambled itinerary</li>
<li>Problem D. Sums of Sums</li>
</ul>
<h4 id="Round-A-1"><a href="#Round-A-1" class="headerlink" title="Round A"></a><a href="https://code.google.com/codejam/contest/9234486/dashboard" target="_blank" rel="noopener">Round A</a></h4><ul>
<li>Problem A. Even Digits</li>
<li>Problem B. Lucky Dip</li>
<li>Problem C. Scrambled Words</li>
</ul>
<h4 id="Round-B-1"><a href="#Round-B-1" class="headerlink" title="Round B"></a><a href="https://code.google.com/codejam/contest/10284486/dashboard" target="_blank" rel="noopener">Round B</a></h4><ul>
<li>Problem A. No Nine</li>
<li>Problem B. Sherlock and the Bit Strings</li>
<li>Problem C. King’s Circle</li>
</ul>
<h4 id="Round-C-1"><a href="#Round-C-1" class="headerlink" title="Round C"></a><a href="https://code.google.com/codejam/contest/4384486/dashboard" target="_blank" rel="noopener">Round C</a></h4><ul>
<li>Problem A. Planet Distance</li>
<li>Problem B. Fairies and Witches</li>
<li>Problem C. Kickstart Alarm</li>
</ul>
<h4 id="Round-D-1"><a href="#Round-D-1" class="headerlink" title="Round D"></a><a href="https://code.google.com/codejam/contest/6364486/dashboard" target="_blank" rel="noopener">Round D</a></h4><ul>
<li>Problem A. Candies</li>
<li>Problem B. Paragliding</li>
<li>Problem C. Funniest Word Search</li>
</ul>
<h4 id="Round-E-1"><a href="#Round-E-1" class="headerlink" title="Round E"></a><a href="https://code.google.com/codejam/contest/4394486/dashboard" target="_blank" rel="noopener">Round E</a></h4><ul>
<li>Problem A. Yogurt</li>
<li>Problem B. Milk Tea</li>
<li>Problem C. Board Game</li>
</ul>
<h4 id="Round-F-1"><a href="#Round-F-1" class="headerlink" title="Round F"></a><a href="https://code.google.com/codejam/contest/3314486/dashboard" target="_blank" rel="noopener">Round F</a></h4><ul>
<li>Problem A. Common Anagrams</li>
<li>Problem B. Specializing Villages</li>
<li>Problem C. Palindromic Sequence</li>
</ul>
<h4 id="Round-G-1"><a href="#Round-G-1" class="headerlink" title="Round G"></a><a href="https://code.google.com/codejam/contest/5374486/dashboard" target="_blank" rel="noopener">Round G</a></h4><ul>
<li>Problem A. Product Triplets</li>
<li>Problem B. Combining Classes</li>
<li>Problem C. Cave Escape</li>
</ul>
<h4 id="Round-H-1"><a href="#Round-H-1" class="headerlink" title="Round H"></a><a href="https://codejam.withgoogle.com/codejam/contest/3324486/dashboard" target="_blank" rel="noopener">Round H</a></h4><ul>
<li>Problem A. Big Buttons</li>
<li>Problem B. Mural</li>
<li>Problem C. Let Me Count The Ways</li>
</ul>
<h3 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h3><h4 id="Practice-Round-2"><a href="#Practice-Round-2" class="headerlink" title="Practice Round"></a><a href="https://code.google.com/codejam/contest/6304486/dashboard" target="_blank" rel="noopener">Practice Round</a></h4><ul>
<li>Problem A. Country Leader</li>
<li>Problem B. Vote</li>
<li>Problem C. Sherlock and Parentheses</li>
</ul>
<h4 id="Round-A-2"><a href="#Round-A-2" class="headerlink" title="Round A"></a><a href="https://code.google.com/codejam/contest/8284486/dashboard" target="_blank" rel="noopener">Round A</a></h4><ul>
<li>Problem A. Square Counting</li>
<li>Problem B. Patterns Overlap</li>
<li>Problem C. Space Cubes</li>
</ul>
<h4 id="Round-B-2"><a href="#Round-B-2" class="headerlink" title="Round B"></a><a href="https://code.google.com/codejam/contest/11304486/dashboard" target="_blank" rel="noopener">Round B</a></h4><ul>
<li>Problem A. Math Encoder</li>
<li>Problem B. Center</li>
<li>Problem C. Christmas Tree</li>
</ul>
<h4 id="Practice-Round-2"><a href="#Practice-Round-2" class="headerlink" title="Practice Round 2"></a><a href="https://code.google.com/codejam/contest/12254486/dashboard" target="_blank" rel="noopener">Practice Round 2</a></h4><ul>
<li>Problem A. Diwali lightings</li>
<li>Problem B. Safe Squares</li>
<li>Problem C. Beautiful Numbers</li>
<li>Problem D. Watson and Intervals</li>
</ul>
<h4 id="Round-C-2"><a href="#Round-C-2" class="headerlink" title="Round C"></a><a href="https://code.google.com/codejam/contest/4344486/dashboard" target="_blank" rel="noopener">Round C</a></h4><ul>
<li>Problem A. Ambiguous Cipher</li>
<li>Problem B. X Squared</li>
<li>Problem C. Magical Thinking</li>
<li>Problem D. The 4M Corporation</li>
</ul>
<h4 id="Round-D-2"><a href="#Round-D-2" class="headerlink" title="Round D"></a><a href="https://code.google.com/codejam/contest/8284487/dashboard" target="_blank" rel="noopener">Round D</a></h4><ul>
<li>Problem A. Go Sightseeing</li>
<li>Problem B. Sherlock and The Matrix Game</li>
<li>Problem C. Trash Throwing</li>
</ul>
<h4 id="Round-E-2"><a href="#Round-E-2" class="headerlink" title="Round E"></a><a href="https://code.google.com/codejam/contest/12234486/dashboard" target="_blank" rel="noopener">Round E</a></h4><ul>
<li>Problem A. Copy &amp; Paste</li>
<li>Problem B. Trapezoid Counting</li>
<li>Problem C. Blackhole</li>
</ul>
<h4 id="Round-F-2"><a href="#Round-F-2" class="headerlink" title="Round F"></a><a href="https://code.google.com/codejam/contest/7254486/dashboard" target="_blank" rel="noopener">Round F</a></h4><ul>
<li>Problem A. Kicksort</li>
<li>Problem B. Dance Battle</li>
<li>Problem C. Catch Them All</li>
<li>Problem D. Eat Cake</li>
</ul>
<h4 id="Round-G-2"><a href="#Round-G-2" class="headerlink" title="Round G"></a><a href="https://code.google.com/codejam/contest/3254486/dashboard" target="_blank" rel="noopener">Round G</a></h4><ul>
<li>Problem A. Huge Numbers</li>
<li>Problem B. Cards Game</li>
<li>Problem C. Matrix Cutting</li>
</ul>
<h3 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h3><h4 id="Practice-Round-3"><a href="#Practice-Round-3" class="headerlink" title="Practice Round"></a><a href="https://code.google.com/codejam/contest/5254486/dashboard" target="_blank" rel="noopener">Practice Round</a></h4><ul>
<li>Problem A. Lazy Spelling Bee</li>
<li>Problem B. Robot Rock Band</li>
<li>Problem C. Not So Random</li>
<li>Problem D. Sums of Sums</li>
</ul>
<h4 id="Round-A-3"><a href="#Round-A-3" class="headerlink" title="Round A"></a><a href="https://code.google.com/codejam/contest/11274486/dashboard" target="_blank" rel="noopener">Round A</a></h4><ul>
<li>Problem A. Country Leader</li>
<li>Problem B. Rain</li>
<li>Problem C. Jane’s Flower Shop</li>
<li>Problem D. Clash Royale</li>
</ul>
<h4 id="Round-B-3"><a href="#Round-B-3" class="headerlink" title="Round B"></a><a href="https://code.google.com/codejam/contest/5254487/dashboard" target="_blank" rel="noopener">Round B</a></h4><ul>
<li>Problem A. Sherlock and Parentheses</li>
<li>Problem B. Sherlock and Watson Gym Secrets</li>
<li>Problem C. Watson and Intervals</li>
<li>Problem D. Sherlock and Permutation Sorting</li>
</ul>
<h4 id="Round-C-3"><a href="#Round-C-3" class="headerlink" title="Round C"></a><a href="https://code.google.com/codejam/contest/6274486/dashboard" target="_blank" rel="noopener">Round C</a></h4><ul>
<li>Problem A. Monster Path</li>
<li>Problem B. Safe Squares</li>
<li>Problem C. Evaluation</li>
<li>Problem D. Soldiers</li>
</ul>
<h4 id="Round-D-3"><a href="#Round-D-3" class="headerlink" title="Round D"></a><a href="https://code.google.com/codejam/contest/5264486/dashboard" target="_blank" rel="noopener">Round D</a></h4><ul>
<li>Problem A. Vote</li>
<li>Problem B. Sitting</li>
<li>Problem C. Codejamon Cipher</li>
<li>Problem D. Stretch Rope</li>
</ul>
<h4 id="Round-E-3"><a href="#Round-E-3" class="headerlink" title="Round E"></a><a href="https://code.google.com/codejam/contest/5264487/dashboard" target="_blank" rel="noopener">Round E</a></h4><ul>
<li>Problem A. Diwali lightings</li>
<li>Problem B. Beautiful Numbers</li>
<li>Problem C. Partioning Number</li>
<li>Problem D. Sorting Array</li>
</ul>
<h3 id="2015"><a href="#2015" class="headerlink" title="2015"></a>2015</h3><h4 id="Practice-Round-4"><a href="#Practice-Round-4" class="headerlink" title="Practice Round"></a><a href="https://code.google.com/codejam/contest/6234486/dashboard" target="_blank" rel="noopener">Practice Round</a></h4><ul>
<li>Problem A. Bad Horse</li>
<li>Problem B. Captain Hammer</li>
<li>Problem C. Moist</li>
</ul>
<h4 id="Round-A-4"><a href="#Round-A-4" class="headerlink" title="Round A"></a><a href="https://code.google.com/codejam/contest/4284486/dashboard" target="_blank" rel="noopener">Round A</a></h4><ul>
<li>Problem A. Googol String</li>
<li>Problem B. gCube</li>
<li>Problem C. gCampus</li>
<li>Problem D. gSnake</li>
</ul>
<h4 id="Round-B-4"><a href="#Round-B-4" class="headerlink" title="Round B"></a><a href="https://code.google.com/codejam/contest/10214486/dashboard" target="_blank" rel="noopener">Round B</a></h4><ul>
<li>Problem A. Travel</li>
<li>Problem B. gWheels</li>
<li>Problem C. gNumbers</li>
<li>Problem D. Albocede DNA</li>
</ul>
<h4 id="Round-C-4"><a href="#Round-C-4" class="headerlink" title="Round C"></a><a href="https://code.google.com/codejam/contest/4284487/dashboard" target="_blank" rel="noopener">Round C</a></h4><ul>
<li>Problem A. gRanks</li>
<li>Problem B. gFiles</li>
<li>Problem C. gGames</li>
<li>Problem D. gMatrix</li>
</ul>
<h4 id="Round-D-4"><a href="#Round-D-4" class="headerlink" title="Round D"></a><a href="https://code.google.com/codejam/contest/11214486/dashboard" target="_blank" rel="noopener">Round D</a></h4><ul>
<li>Problem A. Dynamic Grid</li>
<li>Problem B. gBalloon</li>
<li>Problem C. IP Address Summarization</li>
<li>Problem D. Virtual Rabbit</li>
</ul>
<h4 id="Round-E-4"><a href="#Round-E-4" class="headerlink" title="Round E"></a><a href="https://code.google.com/codejam/contest/8264486/dashboard" target="_blank" rel="noopener">Round E</a></h4><ul>
<li>Problem A. Lazy Spelling Bee</li>
<li>Problem B. Robot Rock Band</li>
<li>Problem C. Not So Random</li>
<li>Problem D. Sums of Sums</li>
</ul>
<h3 id="2014"><a href="#2014" class="headerlink" title="2014"></a>2014</h3><h4 id="Round-A-5"><a href="#Round-A-5" class="headerlink" title="Round A"></a><a href="https://code.google.com/codejam/contest/3214486/dashboard" target="_blank" rel="noopener">Round A</a></h4><ul>
<li>Problem A. Seven-segment Display</li>
<li>Problem B. Super 2048</li>
<li>Problem C. Addition</li>
<li>Problem D. Cut Tiles</li>
</ul>
<h4 id="Round-B-5"><a href="#Round-B-5" class="headerlink" title="Round B"></a><a href="https://code.google.com/codejam/contest/4214486/dashboard" target="_blank" rel="noopener">Round B</a></h4><ul>
<li>Problem A. Password Attacker</li>
<li>Problem B. New Years Eve</li>
<li>Problem C. Card Game</li>
<li>Problem D. Parentheses Order</li>
</ul>
<h4 id="Round-C-5"><a href="#Round-C-5" class="headerlink" title="Round C"></a><a href="https://code.google.com/codejam/contest/5214486/dashboard" target="_blank" rel="noopener">Round C</a></h4><ul>
<li>Problem A. Minesweeper</li>
<li>Problem B. Taking Metro</li>
<li>Problem C. Broken Calculator</li>
<li>Problem D. Tetris</li>
</ul>
<h4 id="Round-D-5"><a href="#Round-D-5" class="headerlink" title="Round D"></a><a href="https://code.google.com/codejam/contest/6214486/dashboard" target="_blank" rel="noopener">Round D</a></h4><ul>
<li>Problem A. Cube IV</li>
<li>Problem B. GBus count</li>
<li>Problem C. Sort a scrambled itinerary</li>
<li>Problem D. Itz Chess</li>
</ul>
]]></content>
      <categories>
        <category>Algroithm</category>
        <category>Google</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Kickstart</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Weekly Contest 162解题记录</title>
    <url>/posts/c72e11ef/</url>
    <content><![CDATA[<p>一个罚时没进200，有点难过。这次题目说实话都直接的。。</p>
<a id="more"></a>

<p><a href="https://github.com/Itachi666/AlgorithmWarehouse/tree/master/LeetcodeContest/WeeklyContest162" target="_blank" rel="noopener">代码在这里</a></p>
<h3 id="1252-Cells-with-Odd-Values-in-a-Matrix"><a href="#1252-Cells-with-Odd-Values-in-a-Matrix" class="headerlink" title="1252. Cells with Odd Values in a Matrix"></a>1252. Cells with Odd Values in a Matrix</h3><p><a href="https://leetcode.com/contest/weekly-contest-162/problems/cells-with-odd-values-in-a-matrix/" target="_blank" rel="noopener">题目</a> </p>
<p>提交次数：1/1</p>
<p>日常签到题，数据量比较小模拟就行了</p>
<p>不过也可以只统计行和列的计数情况，分别统计被增加偶数次和奇数次的行，以及被增加偶数次和奇数次的列，那么对应的 偶数行∗奇数列 和 奇数行∗偶数列 都可以被统计入结果，时间复杂度降为 $O(n)$</p>
<h3 id="1253-Reconstruct-a-2-Row-Binary-Matrix"><a href="#1253-Reconstruct-a-2-Row-Binary-Matrix" class="headerlink" title="1253. Reconstruct a 2-Row Binary Matrix"></a>1253. Reconstruct a 2-Row Binary Matrix</h3><p><a href="https://leetcode.com/contest/weekly-contest-162/problems/reconstruct-a-2-row-binary-matrix/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>交的时候不太确定，不过用贪心足够了。对0和2来说不用考虑什么，1的时候选多的那个减一就可以了。</p>
<p>不过最后没看见每一行数目必须正好对上upper和lower才行。。。</p>
<h3 id="1254-Number-of-Closed-Islands"><a href="#1254-Number-of-Closed-Islands" class="headerlink" title="1254. Number of Closed Islands"></a>1254. Number of Closed Islands</h3><p><a href="https://leetcode.com/contest/weekly-contest-162/problems/number-of-closed-islands/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>标准搜索题。直接bfs就行了。</p>
<h3 id="1255-Maximum-Score-Words-Formed-by-Letters"><a href="#1255-Maximum-Score-Words-Formed-by-Letters" class="headerlink" title="1255. Maximum Score Words Formed by Letters"></a>1255. Maximum Score Words Formed by Letters</h3><p><a href="https://leetcode.com/contest/weekly-contest-162/problems/maximum-score-words-formed-by-letters/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>dfs搜就行了。。。</p>
<p>数据量不大，考虑了几个优化点不知道用上了没有。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Weekly Contest 161解题记录</title>
    <url>/posts/7ae47d21/</url>
    <content><![CDATA[<p>这回意外进前200了还是挺开心的（虽然是压线198），吃饭都香了2333</p>
<a id="more"></a>

<p><a href="https://github.com/Itachi666/AlgorithmWarehouse/tree/master/LeetcodeContest/WeeklyContest161" target="_blank" rel="noopener">代码在这里</a></p>
<h3 id="1247-Minimum-Swaps-to-Make-Strings-Equal"><a href="#1247-Minimum-Swaps-to-Make-Strings-Equal" class="headerlink" title="1247. Minimum Swaps to Make Strings Equal"></a>1247. Minimum Swaps to Make Strings Equal</h3><p><a href="https://leetcode.com/contest/weekly-contest-161/problems/minimum-swaps-to-make-strings-equal/" target="_blank" rel="noopener">题目</a> </p>
<p>提交次数：1/1</p>
<p>意外卡的最久，改了好几次思路。一开始以为只要统计出x和y的数量然后除以2就行了，后来发现不是。</p>
<p>总之纠结了一会发现只要首先找到若干的<code>xx</code>和<code>yy</code>对，最后看剩下的是不是个<code>xy&amp;yx</code>对即可。</p>
<h3 id="1248-Count-Number-of-Nice-Subarrays"><a href="#1248-Count-Number-of-Nice-Subarrays" class="headerlink" title="1248. Count Number of Nice Subarrays"></a>1248. Count Number of Nice Subarrays</h3><p><a href="https://leetcode.com/contest/weekly-contest-161/problems/count-number-of-nice-subarrays/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>这一题猛一看还觉得有点难，仔细一看k给定了那就挺水的了：把奇数位置存起来，然后用一个长度为k的窗口扫一遍，判断有多少个就可以了。</p>
<h3 id="1249-Minimum-Remove-to-Make-Valid-Parentheses"><a href="#1249-Minimum-Remove-to-Make-Valid-Parentheses" class="headerlink" title="1249. Minimum Remove to Make Valid Parentheses"></a>1249. Minimum Remove to Make Valid Parentheses</h3><p><a href="https://leetcode.com/contest/weekly-contest-161/problems/minimum-remove-to-make-valid-parentheses/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>括号匹配加强版。</p>
<p>匹配途中把多余的括号位置记录下来，然后在字符串中挨个删掉就行了。</p>
<h3 id="1250-Check-If-It-Is-a-Good-Array"><a href="#1250-Check-If-It-Is-a-Good-Array" class="headerlink" title="1250. Check If It Is a Good Array"></a>1250. Check If It Is a Good Array</h3><p><a href="https://leetcode.com/contest/weekly-contest-161/problems/check-if-it-is-a-good-array/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>一开始看见选择任意子集还有点吓人，感觉跟最大公约数相关就先写了个gcd上去，甚至还调试了调试浪费了几分钟。。。</p>
<p>然后一看就返回个bool，那不就是看全数组的最大公约数是不是1么。。。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Biweekly Contest 12解题记录</title>
    <url>/posts/b6166e2f/</url>
    <content><![CDATA[<p>最近两次的双周赛都做的不是很顺，在Q3上纠结了太久。</p>
<a id="more"></a>

<p><a href="https://github.com/Itachi666/AlgorithmWarehouse/tree/master/LeetcodeContest/BiweeklyContest12" target="_blank" rel="noopener">代码在这里</a></p>
<h3 id="1243-Array-Transformation"><a href="#1243-Array-Transformation" class="headerlink" title="1243. Array Transformation"></a>1243. Array Transformation</h3><p><a href="https://leetcode.com/contest/biweekly-contest-12/problems/array-transformation/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>签到题，然后就跪了emmm，一开始直接遍历数组然后判断操作的，结果发现前面的改动会影响后面就很难受。改成标记那些位置会改变，然后一起改就好了。</p>
<p>当然直接vector复制一个然后复制回去也可以，，，蠢了。</p>
<h3 id="1244-Design-A-Leaderboard"><a href="#1244-Design-A-Leaderboard" class="headerlink" title="1244. Design A Leaderboard"></a>1244. Design A Leaderboard</h3><p><a href="https://leetcode.com/contest/biweekly-contest-12/problems/design-a-leaderboard/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>这题目读的是真费劲。</p>
<p>第一眼感觉要用数据结构，结果不知道为什么觉得n2的算法不行，非要往下找。现在看看数据范围用n2暴力算法是完全够用的。。。</p>
<p>但用两个map来写是可以的，一开始想到了这个但是有一点没想通就搁着写后面的了。思路很简单：一个map来存每个人的成绩，第二个map来存成绩。靠map自带的有序属性来获取最大的K个成绩。</p>
<p>好像每个人的成绩用vector也够用了</p>
<h3 id="1245-Tree-Diameter"><a href="#1245-Tree-Diameter" class="headerlink" title="1245. Tree Diameter"></a>1245. Tree Diameter</h3><p><a href="https://leetcode.com/contest/biweekly-contest-12/problems/tree-diameter/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/5</p>
<p>看评论说是模版题，就有点尴尬了。</p>
<p>最开始写dfs暴力搜索每个叶子节点的最长，想了半天怎么去重也没去掉，最后果不其然超时了，关键超时就算了还试图优化一下想混过去。。。5min啊5min</p>
<p>后来转换了一下思路，每一轮中扫描所有的节点，每一次把叶子节点删掉，删到只剩下一个或者两个节点为止，这时的轮数就是他的半径。</p>
<p>当然dfs其实也是可以的，参考了一下大佬的方法， 思路很简单：找到距离0号节点最远的节点，然后从这个节点出发找到距离这个节点的最远节点，就是直径。</p>
<p>这个思路就好很多，想了想哪怕这是个图也可以解决。</p>
<p>附代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; w;</span><br><span class="line">    pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; best;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> par, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        best = <span class="built_in">max</span>(best, make_pair(len, a));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> b : w[a])&#123; </span><br><span class="line">            <span class="keyword">if</span>(b != par) &#123;</span><br><span class="line">                dfs(b, a, len + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">treeDiameter</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = (<span class="keyword">int</span>) edges.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">        w.<span class="built_in">clear</span>();</span><br><span class="line">        w.resize(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> a = edges[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> b = edges[i][<span class="number">1</span>];</span><br><span class="line">            w[a].push_back(b);</span><br><span class="line">            w[b].push_back(a);</span><br><span class="line">        &#125;</span><br><span class="line">        best = &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> from = best.second;</span><br><span class="line">        best = &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        dfs(from, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> best.first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="1246-Palindrome-Removal"><a href="#1246-Palindrome-Removal" class="headerlink" title="1246. Palindrome Removal"></a>1246. Palindrome Removal</h3><p><a href="https://leetcode.com/contest/biweekly-contest-12/problems/palindrome-removal/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：0/0</p>
<p>区间dp还是不太熟练。</p>
<p>第三题浪费了太久，到第四题的时候时间已经不多了，看见数据范围100鬼使神差的就想搞个四重循环，当时都觉得自己失了智。</p>
<p>其实有点被题目误导，想法是这样的：首先两层循环确定区间长度和区间首尾，然后枚举内部区间，判断把这个区间删了之后剩下的是不是个回文串。</p>
<p>emmmm总之没调出来，后来还是参考了一下题解才搞定的：</p>
<p>其实就是个比较标准的区间dp，把一个区间拆成两个区间就可以了，然后判断一下首尾是否相同即可。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Weekly Contest 160解题记录</title>
    <url>/posts/a772a4a4/</url>
    <content><![CDATA[<p>这次数据范围是真的小。另外因为第四题太蠢意外进了前200。。。。</p>
<a id="more"></a>

<p><a href="https://github.com/Itachi666/AlgorithmWarehouse/tree/master/LeetcodeContest/WeeklyContest160" target="_blank" rel="noopener">题解代码</a></p>
<h3 id="1237-Find-Positive-Integer-Solution-for-a-Given-Equation"><a href="#1237-Find-Positive-Integer-Solution-for-a-Given-Equation" class="headerlink" title="1237.  Find Positive Integer Solution for a Given Equation"></a>1237.  Find Positive Integer Solution for a Given Equation</h3><p><a href="https://leetcode.com/contest/weekly-contest-160/problems/find-positive-integer-solution-for-a-given-equation/" target="_blank" rel="noopener">题目</a> </p>
<p>提交次数：1/1</p>
<p>签到题，一个二维单调函数<code>f(x,y)</code>找出所有<code>f(x,y)=z</code>的输入<code>(x,y)</code>，其实提高效率对每个x，二分y就可以了应该。但范围实在太小就直接暴力了。。</p>
<h3 id="1238-Circular-Permutation-in-Binary-Representation"><a href="#1238-Circular-Permutation-in-Binary-Representation" class="headerlink" title="1238.  Circular Permutation in Binary Representation"></a>1238.  Circular Permutation in Binary Representation</h3><p><a href="https://leetcode.com/contest/weekly-contest-160/problems/circular-permutation-in-binary-representation/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>参见leetcode的<a href="https://leetcode.com/problems/gray-code/" target="_blank" rel="noopener">第89题</a>，找到这样的顺序之后把输入的start提前到最开始就可以了。</p>
<p>人生就是一个环hhh</p>
<h3 id="1239-Replace-the-Substring-for-Balanced-String"><a href="#1239-Replace-the-Substring-for-Balanced-String" class="headerlink" title="1239. Replace the Substring for Balanced String"></a>1239. Replace the Substring for Balanced String</h3><p><a href="https://leetcode.com/contest/weekly-contest-160/problems/maximum-length-of-a-concatenated-string-with-unique-characters/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>数据范围太小了，总共就16个，不暴力实在不是人。。</p>
<p>被坑了一次，没考虑到一个字符串内部可能就会有重复。</p>
<h3 id="1240-Tiling-a-Rectangle-with-the-Fewest-Squares"><a href="#1240-Tiling-a-Rectangle-with-the-Fewest-Squares" class="headerlink" title="1240. Tiling a Rectangle with the Fewest Squares"></a>1240. Tiling a Rectangle with the Fewest Squares</h3><p><a href="https://leetcode.com/contest/weekly-contest-160/problems/tiling-a-rectangle-with-the-fewest-squares/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>目前做过的最蠢的第四题。。前面那一堆骗分的你们好意思么。</p>
<p>看起来是个dp，实际也是dp，但是测试样例非要搞个幺蛾子让人觉得不是dp。</p>
<p>但实际上就是dp，最后那个测试样例是个特例，就是误导人的emmm从结果上来看这个误导效果真的很好。。。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
 <a id="more"></a> 

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
</search>
