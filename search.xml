<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++: 模板类编译过程中出现“undefined reference to”问题</title>
    <url>/2019/11/24/C-%E6%A8%A1%E6%9D%BF%E7%B1%BB%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%87%BA%E7%8E%B0%E2%80%9Cundefined-rwenti-eference-to%E2%80%9D/</url>
    <content><![CDATA[<p>C++在使用模版（template）类的时候，如果像通常那样将类成员函数的声明和实现分别放在<code>.h</code>和<code>.cpp</code>中，会导致在编译时会报错<code>undefined reference to</code>，找不到对应成员函数。</p>
<a id="more"></a>

<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在实现一个模板类的时候遇到了一个问题：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Matrix.h</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    Matrix(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;T&gt;&gt; &amp;matrix);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Matrix.cpp</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Matrix&lt;T&gt;::Matrix(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;T&gt;&gt; &amp;matrix) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> Matrix&lt;T&gt;::<span class="built_in">display</span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line">Matrix&lt;<span class="keyword">int</span>&gt; base(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>(<span class="keyword">int</span>)&gt; m);</span><br><span class="line">base.<span class="built_in">display</span>();</span><br></pre></td></tr></table></figure>

<p>编译时会报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CMakeFiles\AlgorithmWarehouse.dir/objects.a(main.cpp.obj): In function `main&apos;:</span><br><span class="line">./main.cpp:75: undefined reference to `Matrix&lt;int&gt;::Matrix(std::vector&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;&amp;)&apos;</span><br><span class="line">./main.cpp:76: undefined reference to `Matrix&lt;int&gt;::display()&apos;</span><br></pre></td></tr></table></figure>

<p>很迷不知道为什么会找不到构造函数，查了一圈确定是因为使用<code>template&lt;typename T&gt;</code>的原因，总结一下。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>下面使用一个简单的例子来叙述这个问题：假设要实现一个栈，有两个文件<code>Stack.h</code>和<code>Stack.cpp</code>，栈声明使用<code>template&lt;typename T&gt;</code>，<code>main.cpp</code>在<code>import &quot;Stack.h&quot;</code>后调用这个类。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Stack.h</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(...)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stack.cpp</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> Stack&lt;T&gt;::push() &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"Stack.h"</span></span><br><span class="line">Stack&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">s.push(...);</span><br></pre></td></tr></table></figure>

<p>编译下来会报错：<code>undefined reference to</code></p>
<p>因为<code>template</code>其实是一种类似语法糖的东西，C++中每一个对象所占用的空间大小，是在编译的时候就确定的，在模板类没有真正的被使用之前，编译器是无法知道，模板类中使用模板类型的对象的所占用的空间的大小的。只有模板被真正使用的时候，编译器才知道，模板套用的是什么类型，应该分配多少空间。这也就是模板类为什么只是称之为模板，而不是泛型的缘故。</p>
<p>既然是在编译的时候，根据套用的不同类型进行编译，那么，套用不同类型的模板类实际上就是两个不同的类型，也就是说，<code>stack&lt;int&gt;</code>和<code>stack&lt;char&gt;</code>是两个不同的数据类型，他们共同的成员函数也不是同一个函数，只不过具有相似的功能罢了。</p>
<p>所以模版本质其实和宏差不多，不同于原本的类型定义。编译器在编译<code>main.cpp</code>时会根据需要隐式实例化诸如 <code>Stack&lt;int&gt;</code>，如果这个实例并没有在<code>main.cpp</code>中，编译器就会根据include去找，但是显然编译时<code>Stack.h</code>中并没有对<code>Stack&lt;int&gt;</code>的声明，于是就报错了。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="显式声明"><a href="#显式声明" class="headerlink" title="显式声明"></a>显式声明</h3><p>在<code>Stack.cpp</code>中显式声明会用到的类型：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;int&gt;;</span></span><br><span class="line"><span class="keyword">template</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;std::string&gt;;</span></span><br></pre></td></tr></table></figure>

<p>我认为的最好的办法，但缺点也很显然，如果需要一种新的数据类型就很难受，必须手动再添加，封装上不太友好。</p>
<h3 id="全放到头文件中"><a href="#全放到头文件中" class="headerlink" title="全放到头文件中"></a>全放到头文件中</h3><p>很直接，把所有<code>Stack.cpp</code>中的源代码全放到<code>Stack.h</code>中，不需要进行任何修改。但缺点就是如果这个头文件在很多文件中被使用的话，会影响编译速度，但不会产生任何链接问题，因为编译器会忽略重复实现。</p>
<h3 id="把实现代码移至一个新头文件中"><a href="#把实现代码移至一个新头文件中" class="headerlink" title="把实现代码移至一个新头文件中"></a>把实现代码移至一个新头文件中</h3><p>把<code>Stack.cpp</code>改为<code>Stack_impl.h</code>，然后在<code>Stack.h</code>里面<code>import &quot;Stack_impl.h&quot;</code>，这样能保证代码实现和声明在不同的文件中，但本质上和上一个解决办法是一样的。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>代码学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Weekly Contest 164解题记录</title>
    <url>/2019/11/24/Leetcode-Weekly-Contest-164%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>水题四道emmm，还算不错40分钟做完了，侥幸进了前200</p>
<a id="more"></a>

<p><a href="https://github.com/Itachi666/AlgorithmWarehouse/tree/master/LeetcodeContest/WeeklyContest164" target="_blank" rel="noopener">代码在这里</a></p>
<h3 id="1266-Minimum-Time-Visiting-All-Points"><a href="#1266-Minimum-Time-Visiting-All-Points" class="headerlink" title="1266. Minimum Time Visiting All Points"></a>1266. Minimum Time Visiting All Points</h3><p><a href="https://leetcode.com/contest/weekly-contest-164/problems/minimum-time-visiting-all-points/" target="_blank" rel="noopener">题目</a> </p>
<p>提交次数：1/1</p>
<p>两点路线固定，还按顺序，直接算就行了。</p>
<h3 id="1267-Count-Servers-that-Communicate"><a href="#1267-Count-Servers-that-Communicate" class="headerlink" title="1267. Count Servers that Communicate"></a>1267. Count Servers that Communicate</h3><p><a href="https://leetcode.com/contest/weekly-contest-164/problems/count-servers-that-communicate/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>开两个数组记录每行每列各有多少个机器就行了。</p>
<p>本来想尝试一次扫描搞定来着，看了看数据范围也不大不打算耽误多长时间了，就直接暴力了。</p>
<h3 id="1268-Greatest-Sum-Divisible-by-Three"><a href="#1268-Greatest-Sum-Divisible-by-Three" class="headerlink" title="1268. Greatest Sum Divisible by Three"></a>1268. Greatest Sum Divisible by Three</h3><p><a href="https://leetcode.com/contest/weekly-contest-164/problems/search-suggestions-system/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>最后写的这道题，看见这种一堆words的就头疼。。</p>
<p>数据范围不大直接写的暴力，单词每加一个字母得到的搜索结果肯定是上一个搜索结果里面的，最后输出前把记录取前三个就行了。</p>
<p>看了看题解似乎是想让用字典树，真的这个数据范围太弱了加俩零应该就没啥问题了。。字典树的问题在于会自动去重，要在叶子的地方做一些处理。</p>
<h3 id="1269-Number-of-Ways-to-Stay-in-the-Same-Place-After-Some-Steps"><a href="#1269-Number-of-Ways-to-Stay-in-the-Same-Place-After-Some-Steps" class="headerlink" title="1269. Number of Ways to Stay in the Same Place After Some Steps"></a>1269. Number of Ways to Stay in the Same Place After Some Steps</h3><p><a href="https://leetcode.com/contest/weekly-contest-164/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>不知道见多少次的dp了，<code>arrLen</code>看着挺吓人但其实也就那么回事，只要<code>steps</code>不高压根就走不过去。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Go的Function types学习</title>
    <url>/2019/11/21/Go%E7%9A%84Function-types/</url>
    <content><![CDATA[<p>翻Fabric源码的时候看到了一个<code>type ChannelProvider func() (Channel, error)</code>，半天没看懂是个啥，查了一下发现是go的<a href="https://golang.org/ref/spec#Function_types" target="_blank" rel="noopener">Function types</a>语法，于是记录一下。</p>
<a id="more"></a>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>起因是在翻Fabric sdk创建的时候发现<code>New</code>函数很明显有一个<code>channelProvider</code>函数参数，</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(channelProvider context.ChannelProvider, opts ...ClientOption)</span> <span class="params">(*Client, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	channelContext, err := channelProvider()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.WithMessage(err, <span class="string">"failed to create channel context"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但找了一下定义发现是这么一个东西：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ChannelProvider returns channel client context</span></span><br><span class="line"><span class="keyword">type</span> ChannelProvider <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(Channel, error)</span></span></span><br></pre></td></tr></table></figure>

<p>而调用过程是这样的：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ChannelContext creates and returns channel context</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sdk *FabricSDK)</span> <span class="title">ChannelContext</span><span class="params">(channelID <span class="keyword">string</span>, options ...ContextOption)</span> <span class="title">contextApi</span>.<span class="title">ChannelProvider</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	channelProvider := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(contextApi.Channel, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">		clientCtxProvider := sdk.Context(options...)</span><br><span class="line">		<span class="keyword">return</span> context.NewChannel(clientCtxProvider, channelID)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> channelProvider</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clientChannelContext := sdk.ChannelContext(initInfo.ChannelID, fabsdk.WithUser(initInfo.UserName), fabsdk.WithOrg(initInfo.OrgName))</span><br><span class="line">	</span><br><span class="line">channelClient, err := channel.New(clientChannelContext)</span><br></pre></td></tr></table></figure>

<h2 id="Function-Types"><a href="#Function-Types" class="headerlink" title="Function Types"></a>Function Types</h2><p>官方文档在<a href="https://golang.org/ref/spec#Function_types" target="_blank" rel="noopener">这里</a>，对其的定义是：</p>
<blockquote>
<p>A function type denotes the set of all functions with the same parameter and result types. </p>
</blockquote>
<p>首先来看一个例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Greeting function types</span></span><br><span class="line"><span class="keyword">type</span> Greeting <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(g Greeting, n <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(g(n))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">english</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    say(english, <span class="string">"World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>say()</code>函数要求一个<code>Greeting</code>类型的函数参数，而<code>english()</code>函数由于参数输入输出均与<code>Greeting</code>类型相同，因此便能够作为参数传入<code>say()</code>中。</p>
<p>我的理解是这样定义了一个函数类型或者说函数集合，同样输入输出的函数被归为一类，感觉和go的Interface设计理念有点类似，只要函数接口相同就能够传入。</p>
<p>把上面的例子进一步扩展一下的话：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Greeting function types</span></span><br><span class="line"><span class="keyword">type</span> Greeting <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g Greeting)</span> <span class="title">say</span><span class="params">(n <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(g(n))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">english</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">french</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Bonjour, "</span> + name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    g := Greeting(english)</span><br><span class="line">    g.say(<span class="string">"World"</span>)</span><br><span class="line">    g = Greeting(french)</span><br><span class="line">    g.say(<span class="string">"World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello, World</span><br><span class="line">Bonjour, World</span><br></pre></td></tr></table></figure>

<p>这就有点类的意思了。一开始先把<code>func(name string) string</code>这样的函数声明成<code>Greeting</code>类型，接着通过<code>Greeting(english)</code>将<code>english</code>函数转换成<code>Greeting</code>类型（类似强制类型转换）。通过这个转换以后，就可以借由变量<code>g</code>调用<code>Greeting</code>类型的<code>say()</code>方法。<code>Greeting(french)</code>同理。</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>代码学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Kickstart 2019 Round H参赛记录与解题思路</title>
    <url>/2019/11/19/Kickstart-2019-Round-H%E5%8F%82%E8%B5%9B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>用了一星期刷了一下今年的前几轮题，虽然感受到了这些轮数之间题目难度幅度差别有点大，但大概没想到最后结果会是惨败。打完直接自闭了。。。想了想还是记录一下吧，希望明年能成功混一件衣服回来。</p>
<p>题解代码等这两天补上。</p>
<a id="more"></a>

<p><img src="https://tvax2.sinaimg.cn/large/890e0d7bgy1g93oizf7o8j21520objtb.jpg" alt=""></p>
<p><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050edd" target="_blank" rel="noopener">比赛链接</a></p>
<h2 id="Q1-H-index"><a href="#Q1-H-index" class="headerlink" title="Q1: H-index"></a>Q1: H-index</h2><p>题目大意：一个人发表了n篇文章，每一个文章具有一个影响因子<code>A[i]</code>，如果一个人有h篇文章的影响因子都大于等于h，则这个人的H-index就是h。根据发表的文章顺序，问每一篇文章发表后这个人的H-index都变为了多少。</p>
<p>刚开始看见小数据集只有5分的时候就有点感觉不妙，暴力写了一个交了然后开始研究大数据集，然后卡在了怎么来维护这么一个数据范围上。显然$10^5$的数据范围肯定是要$O(log n)$级别的维护，但尝试了二分插入等方法之后还是不知所措。</p>
<p>看过答案之后感觉其实是有暗示的，$O(log n)$级别的数据维护其实没几个，该想到用最小堆维护的。</p>
<h2 id="Q2-Diagonal-Puzzle"><a href="#Q2-Diagonal-Puzzle" class="headerlink" title="Q2: Diagonal Puzzle"></a>Q2: Diagonal Puzzle</h2><p>题目大意：一个n*n的矩阵，每个矩阵中有一个白色棋子或黑色棋子，每一次可以选择一条斜的对角线（左右均可）来让一行棋子翻转，类似黑白棋。问最少多少次操作能够使全部棋子变黑。</p>
<p>这题中途看了一眼通过率吓了一跳，比第三题还低。小数据集很明显是让暴力搜索的，可以分析出每一个对角线至多只会翻转一次，写了一个BFS结果一直在爆空间，调了一会之后心态就炸了。现在想想可能写个dfs更好一点。</p>
<p>大数据集的第一个题解说实话我没怎么看懂。。但是第二个题解还是看懂了的，很巧妙的思路，将矩阵问题变成了一个二色染色图来搜索</p>
<h2 id="Q3-Elevanagram"><a href="#Q3-Elevanagram" class="headerlink" title="Q3: Elevanagram"></a>Q3: Elevanagram</h2><p>题目大意：给若干个1-9，问这些是否能够组成一个11的倍数。11的倍数满足<br>$$<br>（奇数位的和-偶数位的和）mod \space 11=0<br>$$<br>这题大概是心态最炸的，上午刚刚做完这么一个类似的dp，下午就不记得了。用<code>dp[i][j](0&lt;=j&lt;=11)</code>表示前面<code>i</code>个数分别在模11余<code>j</code>时是否存在，然后顺次递推就可以了。</p>
<p>至于大数据集其实可以偷鸡，如果某个数的个数大于20就把他减少至20以内，事实证明是过的去的。</p>
<p>其实中途曾经尝试考虑过这种思路，但结果上emmm，不知道怎么就给否了，很轻易的否了。。。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
        <category>Google</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Kickstart</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Weekly Contest 163解题记录</title>
    <url>/2019/11/19/Leetcode-Weekly-Contest-163%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>头天晚上睡得太晚硬是睡过了。。迟到了半小时开始做，结果只做出来了两道。但没想到排名直接掉了40+，这掉的也太多了。。事实证明刚爬起来就不要瞎搞什么动脑子的活动。</p>
<a id="more"></a>

<p><a href="https://github.com/Itachi666/AlgorithmWarehouse/tree/master/LeetcodeContest/WeeklyContest163" target="_blank" rel="noopener">代码在这里</a></p>
<h3 id="1260-Shift-2D-Grid"><a href="#1260-Shift-2D-Grid" class="headerlink" title="1260. Shift 2D Grid"></a>1260. Shift 2D Grid</h3><p><a href="https://leetcode.com/contest/weekly-contest-163/problems/shift-2d-grid/" target="_blank" rel="noopener">题目</a> </p>
<p>提交次数：1/1</p>
<p>刚开始看成矩阵旋转，写了一会发现看错题直接暴力模拟了，看题解说可以把这个矩阵拉成线性数组移位之后在放回去。</p>
<h3 id="1261-Find-Elements-in-a-Contaminated-Binary-Tree"><a href="#1261-Find-Elements-in-a-Contaminated-Binary-Tree" class="headerlink" title="1261. Find Elements in a Contaminated Binary Tree"></a>1261. Find Elements in a Contaminated Binary Tree</h3><p><a href="https://leetcode.com/contest/weekly-contest-163/problems/find-elements-in-a-contaminated-binary-tree/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>简单的树的遍历操作，没啥好说的</p>
<h3 id="1262-Greatest-Sum-Divisible-by-Three"><a href="#1262-Greatest-Sum-Divisible-by-Three" class="headerlink" title="1262. Greatest Sum Divisible by Three"></a>1262. Greatest Sum Divisible by Three</h3><p><a href="https://leetcode.com/contest/weekly-contest-162/problems/number-of-closed-islands/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：0/5？</p>
<p>难不难不好说，写这题的时候脑子简直一坨浆糊。。更没想到的是这题的dp思路和下午的Kickstart思路相同。。这个就留着那篇再说吧</p>
<p>忘了一开始怎么想的了，好像一直在贪心结果被各种特例吊打逐渐心态就崩了</p>
<p>两种做法：第一种很简单，求和取模，如果模3余1就找到最小的模3余1的值或者最小的两个模3余2的值，模3余2亦然。</p>
<p>另一种就是dp思路：<code>dp[i][j]</code> 表示前<code>i</code>个元素在模3余0，1，2的最大值，状态转移方程就有：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">dp[i+<span class="number">1</span>][(j + nums[i])%<span class="number">3</span>] = <span class="built_in">max</span>(dp[i][(j + nums[i])%<span class="number">3</span>], dp[i][j]+nums[i])</span><br></pre></td></tr></table></figure>



<h3 id="1263-Minimum-Moves-to-Move-a-Box-to-Their-Target-Location"><a href="#1263-Minimum-Moves-to-Move-a-Box-to-Their-Target-Location" class="headerlink" title="1263. Minimum Moves to Move a Box to Their Target Location"></a>1263. Minimum Moves to Move a Box to Their Target Location</h3><p><a href="https://leetcode.com/contest/weekly-contest-162/problems/maximum-score-words-formed-by-letters/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：0/?</p>
<p>最开始看到感觉代码量挺大的，最后补一下事实上也确实代码量挺大的emmmm</p>
<p>双重染色问题，两个BFS搞定了。</p>
<p>首先第一重BFS来记录推箱子，分别记录箱子的位置和人的位置。在每一个状态中，以人的位置为起点进行一次BFS遍历染色，找出所有人能够在不推箱子的情况下走到的位置，如果这个位置能够推箱子，就把他加入第一重BFS中。</p>
<p>但是坑在于如何记录箱子的移动，也就是去重。</p>
<p>一开始我是直接以记录箱子位置来判重，但是实际上会出现需要人先把箱子推过去后过去然后再推回来的情况。尝试删除这个判重结果果然爆炸，最后看数据范围直接开了个四重数组来记录人和箱子的位置来解决的。想了想可以简化一下，三维数组来记录箱子的位置和方向，应该也是可以的。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Biweekly Contest 13解题记录</title>
    <url>/2019/11/19/Leetcode-Biweekly-Contest-13%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>这次双周赛居然有三个medium，快结束了打完都能差点进了200（其实能进但罚时超了，，</p>
<a id="more"></a>

<p><a href="https://github.com/Itachi666/AlgorithmWarehouse/tree/master/LeetcodeContest/WeeklyContest163" target="_blank" rel="noopener">代码在这里</a></p>
<h3 id="1256-Encode-Number"><a href="#1256-Encode-Number" class="headerlink" title="1256. Encode Number"></a>1256. Encode Number</h3><p><a href="https://leetcode.com/contest/biweekly-contest-13/problems/encode-number/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>好几种办法吧，最简单的应该就是 $n+1$ 的二进制去掉首位了。</p>
<p>刚开始没想到，就看出来好像是以 $2^n$ 循环，写的有点复杂。</p>
<h3 id="1257-Smallest-Common-Region"><a href="#1257-Smallest-Common-Region" class="headerlink" title="1257. Smallest Common Region"></a>1257. Smallest Common Region</h3><p><a href="https://leetcode.com/contest/biweekly-contest-13/problems/smallest-common-region/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>不能算难，但挺麻烦的。想了想构造了一棵树，然后顺着一个节点往上搜就可以了，还好数据量不大，用两个哈希表可以存下。</p>
<h3 id="1258-Synonymous-Sentences"><a href="#1258-Synonymous-Sentences" class="headerlink" title="1258. Synonymous Sentences"></a>1258. Synonymous Sentences</h3><p><a href="https://leetcode.com/contest/biweekly-contest-13/problems/synonymous-sentences/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>代码量有点大，wa了一次在误以为同义词的长度相同上。</p>
<p>刚开始看数据当成了同义词只会有两个，写完发现虽然是给的每一组两个同义词，但不同组之间也可以有相同的词，也就是说可以同时有好几个单词互相是同义词。</p>
<p>emmm就有点麻烦，被迫实现了一个并查集来统计。</p>
<p>其他的就没什么了，一个dfs搞定。</p>
<h3 id="1259-Handshakes-That-Don’t-Cross"><a href="#1259-Handshakes-That-Don’t-Cross" class="headerlink" title="1259. Handshakes That Don’t Cross"></a>1259. Handshakes That Don’t Cross</h3><p><a href="https://leetcode.com/contest/biweekly-contest-13/problems/handshakes-that-dont-cross/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>想了想认出来了dp。</p>
<p><code>dp[i]</code>表示<code>2*i</code>个人的数量，枚举和1号节点连接的点<code>j=2,4,...,2*i</code>，这样剩下的就分成了两组<code>j-2</code>和<code>i*2-j</code>，乘起来就行了。</p>
<p>wa了一次没有对答案取余。。。不然就进200了T T</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌KickStart题目索引整理</title>
    <url>/2019/11/19/%E8%B0%B7%E6%AD%8CKickstart%E9%A2%98%E7%9B%AE%E7%B4%A2%E5%BC%95%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>发现做完今年的H轮之后Kickstart的时间表就更新成明年的了。。虽然H轮做的一坨屎但还是要回顾一下的。看了看网址都还在也能回去练习，只是没有索引了，就干脆整理一下方便回顾。</p>
<a id="more"></a>

<p>前期整理来自于<a href="https://github.com/amylmy/KickStart-GoogleCompetition" target="_blank" rel="noopener">amylmy</a></p>
<p>蠢了谷歌还是有整合的：<a href="https://codingcompetitions.withgoogle.com/kickstart/archive/2019" target="_blank" rel="noopener">Kickstart 2019</a>，但试了试18年之前的好像不太行。</p>
<h3 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h3><h4 id="Round-H"><a href="#Round-H" class="headerlink" title="Round H"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050edd" target="_blank" rel="noopener">Round H</a></h4><ul>
<li>H-index</li>
<li>Diagonal Puzzle</li>
<li>Elevanagram</li>
</ul>
<h4 id="Round-G"><a href="#Round-G" class="headerlink" title="Round G"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000051066" target="_blank" rel="noopener">Round G</a></h4><ul>
<li>Product Triplets </li>
<li>Combining Classes</li>
<li>Cave Escape</li>
</ul>
<h4 id="Round-F"><a href="#Round-F" class="headerlink" title="Round F"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050edc" target="_blank" rel="noopener">Round F</a></h4><ul>
<li>Flattening</li>
<li>Teach Me</li>
<li>Spectating Villages</li>
</ul>
<h4 id="Round-E"><a href="#Round-E" class="headerlink" title="Round E"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050edb" target="_blank" rel="noopener">Round E</a></h4><ul>
<li>Cherries Mesh </li>
<li>Code-Eat Switcher </li>
<li>Street Checkers </li>
</ul>
<h4 id="Round-D"><a href="#Round-D" class="headerlink" title="Round D"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000051061" target="_blank" rel="noopener">Round D</a></h4><ul>
<li>X or What?</li>
<li>Latest Guests</li>
<li>Food Stalls</li>
</ul>
<h4 id="Round-C"><a href="#Round-C" class="headerlink" title="Round C"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050ff2" target="_blank" rel="noopener">Round C</a></h4><ul>
<li>Wiggle Walk</li>
<li>Circuit Board</li>
<li>Catch Some</li>
</ul>
<h4 id="Round-B"><a href="#Round-B" class="headerlink" title="Round B"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050eda" target="_blank" rel="noopener">Round B</a></h4><ul>
<li>Building Palindromes</li>
<li>Energy Stones</li>
<li>Diverse Subarray</li>
</ul>
<h4 id="Round-A"><a href="#Round-A" class="headerlink" title="Round A"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050e01" target="_blank" rel="noopener">Round A</a></h4><ul>
<li>Training</li>
<li>Parcels</li>
<li>Contention</li>
</ul>
<h4 id="Practice-Round"><a href="#Practice-Round" class="headerlink" title="Practice Round"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000051060" target="_blank" rel="noopener">Practice Round</a></h4><ul>
<li>Guessing Number (平台热身)</li>
<li>Mural （同2018-H轮-B题）</li>
<li>Kickstart Alarm （同2018-C轮-C题）</li>
</ul>
<h3 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h3><h4 id="Practice-Round-1"><a href="#Practice-Round-1" class="headerlink" title="Practice Round"></a><a href="https://code.google.com/codejam/contest/4374486/dashboard" target="_blank" rel="noopener">Practice Round</a></h4><ul>
<li>Problem A. GBus count</li>
<li>Problem B. Googol String</li>
<li>Problem C. Sort a scrambled itinerary</li>
<li>Problem D. Sums of Sums</li>
</ul>
<h4 id="Round-A-1"><a href="#Round-A-1" class="headerlink" title="Round A"></a><a href="https://code.google.com/codejam/contest/9234486/dashboard" target="_blank" rel="noopener">Round A</a></h4><ul>
<li>Problem A. Even Digits</li>
<li>Problem B. Lucky Dip</li>
<li>Problem C. Scrambled Words</li>
</ul>
<h4 id="Round-B-1"><a href="#Round-B-1" class="headerlink" title="Round B"></a><a href="https://code.google.com/codejam/contest/10284486/dashboard" target="_blank" rel="noopener">Round B</a></h4><ul>
<li>Problem A. No Nine</li>
<li>Problem B. Sherlock and the Bit Strings</li>
<li>Problem C. King’s Circle</li>
</ul>
<h4 id="Round-C-1"><a href="#Round-C-1" class="headerlink" title="Round C"></a><a href="https://code.google.com/codejam/contest/4384486/dashboard" target="_blank" rel="noopener">Round C</a></h4><ul>
<li>Problem A. Planet Distance</li>
<li>Problem B. Fairies and Witches</li>
<li>Problem C. Kickstart Alarm</li>
</ul>
<h4 id="Round-D-1"><a href="#Round-D-1" class="headerlink" title="Round D"></a><a href="https://code.google.com/codejam/contest/6364486/dashboard" target="_blank" rel="noopener">Round D</a></h4><ul>
<li>Problem A. Candies</li>
<li>Problem B. Paragliding</li>
<li>Problem C. Funniest Word Search</li>
</ul>
<h4 id="Round-E-1"><a href="#Round-E-1" class="headerlink" title="Round E"></a><a href="https://code.google.com/codejam/contest/4394486/dashboard" target="_blank" rel="noopener">Round E</a></h4><ul>
<li>Problem A. Yogurt</li>
<li>Problem B. Milk Tea</li>
<li>Problem C. Board Game</li>
</ul>
<h4 id="Round-F-1"><a href="#Round-F-1" class="headerlink" title="Round F"></a><a href="https://code.google.com/codejam/contest/3314486/dashboard" target="_blank" rel="noopener">Round F</a></h4><ul>
<li>Problem A. Common Anagrams</li>
<li>Problem B. Specializing Villages</li>
<li>Problem C. Palindromic Sequence</li>
</ul>
<h4 id="Round-G-1"><a href="#Round-G-1" class="headerlink" title="Round G"></a><a href="https://code.google.com/codejam/contest/5374486/dashboard" target="_blank" rel="noopener">Round G</a></h4><ul>
<li>Problem A. Product Triplets</li>
<li>Problem B. Combining Classes</li>
<li>Problem C. Cave Escape</li>
</ul>
<h4 id="Round-H-1"><a href="#Round-H-1" class="headerlink" title="Round H"></a><a href="https://codejam.withgoogle.com/codejam/contest/3324486/dashboard" target="_blank" rel="noopener">Round H</a></h4><ul>
<li>Problem A. Big Buttons</li>
<li>Problem B. Mural</li>
<li>Problem C. Let Me Count The Ways</li>
</ul>
<h3 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h3><h4 id="Practice-Round-2"><a href="#Practice-Round-2" class="headerlink" title="Practice Round"></a><a href="https://code.google.com/codejam/contest/6304486/dashboard" target="_blank" rel="noopener">Practice Round</a></h4><ul>
<li>Problem A. Country Leader</li>
<li>Problem B. Vote</li>
<li>Problem C. Sherlock and Parentheses</li>
</ul>
<h4 id="Round-A-2"><a href="#Round-A-2" class="headerlink" title="Round A"></a><a href="https://code.google.com/codejam/contest/8284486/dashboard" target="_blank" rel="noopener">Round A</a></h4><ul>
<li>Problem A. Square Counting</li>
<li>Problem B. Patterns Overlap</li>
<li>Problem C. Space Cubes</li>
</ul>
<h4 id="Round-B-2"><a href="#Round-B-2" class="headerlink" title="Round B"></a><a href="https://code.google.com/codejam/contest/11304486/dashboard" target="_blank" rel="noopener">Round B</a></h4><ul>
<li>Problem A. Math Encoder</li>
<li>Problem B. Center</li>
<li>Problem C. Christmas Tree</li>
</ul>
<h4 id="Practice-Round-2"><a href="#Practice-Round-2" class="headerlink" title="Practice Round 2"></a><a href="https://code.google.com/codejam/contest/12254486/dashboard" target="_blank" rel="noopener">Practice Round 2</a></h4><ul>
<li>Problem A. Diwali lightings</li>
<li>Problem B. Safe Squares</li>
<li>Problem C. Beautiful Numbers</li>
<li>Problem D. Watson and Intervals</li>
</ul>
<h4 id="Round-C-2"><a href="#Round-C-2" class="headerlink" title="Round C"></a><a href="https://code.google.com/codejam/contest/4344486/dashboard" target="_blank" rel="noopener">Round C</a></h4><ul>
<li>Problem A. Ambiguous Cipher</li>
<li>Problem B. X Squared</li>
<li>Problem C. Magical Thinking</li>
<li>Problem D. The 4M Corporation</li>
</ul>
<h4 id="Round-D-2"><a href="#Round-D-2" class="headerlink" title="Round D"></a><a href="https://code.google.com/codejam/contest/8284487/dashboard" target="_blank" rel="noopener">Round D</a></h4><ul>
<li>Problem A. Go Sightseeing</li>
<li>Problem B. Sherlock and The Matrix Game</li>
<li>Problem C. Trash Throwing</li>
</ul>
<h4 id="Round-E-2"><a href="#Round-E-2" class="headerlink" title="Round E"></a><a href="https://code.google.com/codejam/contest/12234486/dashboard" target="_blank" rel="noopener">Round E</a></h4><ul>
<li>Problem A. Copy &amp; Paste</li>
<li>Problem B. Trapezoid Counting</li>
<li>Problem C. Blackhole</li>
</ul>
<h4 id="Round-F-2"><a href="#Round-F-2" class="headerlink" title="Round F"></a><a href="https://code.google.com/codejam/contest/7254486/dashboard" target="_blank" rel="noopener">Round F</a></h4><ul>
<li>Problem A. Kicksort</li>
<li>Problem B. Dance Battle</li>
<li>Problem C. Catch Them All</li>
<li>Problem D. Eat Cake</li>
</ul>
<h4 id="Round-G-2"><a href="#Round-G-2" class="headerlink" title="Round G"></a><a href="https://code.google.com/codejam/contest/3254486/dashboard" target="_blank" rel="noopener">Round G</a></h4><ul>
<li>Problem A. Huge Numbers</li>
<li>Problem B. Cards Game</li>
<li>Problem C. Matrix Cutting</li>
</ul>
<h3 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h3><h4 id="Practice-Round-3"><a href="#Practice-Round-3" class="headerlink" title="Practice Round"></a><a href="https://code.google.com/codejam/contest/5254486/dashboard" target="_blank" rel="noopener">Practice Round</a></h4><ul>
<li>Problem A. Lazy Spelling Bee</li>
<li>Problem B. Robot Rock Band</li>
<li>Problem C. Not So Random</li>
<li>Problem D. Sums of Sums</li>
</ul>
<h4 id="Round-A-3"><a href="#Round-A-3" class="headerlink" title="Round A"></a><a href="https://code.google.com/codejam/contest/11274486/dashboard" target="_blank" rel="noopener">Round A</a></h4><ul>
<li>Problem A. Country Leader</li>
<li>Problem B. Rain</li>
<li>Problem C. Jane’s Flower Shop</li>
<li>Problem D. Clash Royale</li>
</ul>
<h4 id="Round-B-3"><a href="#Round-B-3" class="headerlink" title="Round B"></a><a href="https://code.google.com/codejam/contest/5254487/dashboard" target="_blank" rel="noopener">Round B</a></h4><ul>
<li>Problem A. Sherlock and Parentheses</li>
<li>Problem B. Sherlock and Watson Gym Secrets</li>
<li>Problem C. Watson and Intervals</li>
<li>Problem D. Sherlock and Permutation Sorting</li>
</ul>
<h4 id="Round-C-3"><a href="#Round-C-3" class="headerlink" title="Round C"></a><a href="https://code.google.com/codejam/contest/6274486/dashboard" target="_blank" rel="noopener">Round C</a></h4><ul>
<li>Problem A. Monster Path</li>
<li>Problem B. Safe Squares</li>
<li>Problem C. Evaluation</li>
<li>Problem D. Soldiers</li>
</ul>
<h4 id="Round-D-3"><a href="#Round-D-3" class="headerlink" title="Round D"></a><a href="https://code.google.com/codejam/contest/5264486/dashboard" target="_blank" rel="noopener">Round D</a></h4><ul>
<li>Problem A. Vote</li>
<li>Problem B. Sitting</li>
<li>Problem C. Codejamon Cipher</li>
<li>Problem D. Stretch Rope</li>
</ul>
<h4 id="Round-E-3"><a href="#Round-E-3" class="headerlink" title="Round E"></a><a href="https://code.google.com/codejam/contest/5264487/dashboard" target="_blank" rel="noopener">Round E</a></h4><ul>
<li>Problem A. Diwali lightings</li>
<li>Problem B. Beautiful Numbers</li>
<li>Problem C. Partioning Number</li>
<li>Problem D. Sorting Array</li>
</ul>
<h3 id="2015"><a href="#2015" class="headerlink" title="2015"></a>2015</h3><h4 id="Practice-Round-4"><a href="#Practice-Round-4" class="headerlink" title="Practice Round"></a><a href="https://code.google.com/codejam/contest/6234486/dashboard" target="_blank" rel="noopener">Practice Round</a></h4><ul>
<li>Problem A. Bad Horse</li>
<li>Problem B. Captain Hammer</li>
<li>Problem C. Moist</li>
</ul>
<h4 id="Round-A-4"><a href="#Round-A-4" class="headerlink" title="Round A"></a><a href="https://code.google.com/codejam/contest/4284486/dashboard" target="_blank" rel="noopener">Round A</a></h4><ul>
<li>Problem A. Googol String</li>
<li>Problem B. gCube</li>
<li>Problem C. gCampus</li>
<li>Problem D. gSnake</li>
</ul>
<h4 id="Round-B-4"><a href="#Round-B-4" class="headerlink" title="Round B"></a><a href="https://code.google.com/codejam/contest/10214486/dashboard" target="_blank" rel="noopener">Round B</a></h4><ul>
<li>Problem A. Travel</li>
<li>Problem B. gWheels</li>
<li>Problem C. gNumbers</li>
<li>Problem D. Albocede DNA</li>
</ul>
<h4 id="Round-C-4"><a href="#Round-C-4" class="headerlink" title="Round C"></a><a href="https://code.google.com/codejam/contest/4284487/dashboard" target="_blank" rel="noopener">Round C</a></h4><ul>
<li>Problem A. gRanks</li>
<li>Problem B. gFiles</li>
<li>Problem C. gGames</li>
<li>Problem D. gMatrix</li>
</ul>
<h4 id="Round-D-4"><a href="#Round-D-4" class="headerlink" title="Round D"></a><a href="https://code.google.com/codejam/contest/11214486/dashboard" target="_blank" rel="noopener">Round D</a></h4><ul>
<li>Problem A. Dynamic Grid</li>
<li>Problem B. gBalloon</li>
<li>Problem C. IP Address Summarization</li>
<li>Problem D. Virtual Rabbit</li>
</ul>
<h4 id="Round-E-4"><a href="#Round-E-4" class="headerlink" title="Round E"></a><a href="https://code.google.com/codejam/contest/8264486/dashboard" target="_blank" rel="noopener">Round E</a></h4><ul>
<li>Problem A. Lazy Spelling Bee</li>
<li>Problem B. Robot Rock Band</li>
<li>Problem C. Not So Random</li>
<li>Problem D. Sums of Sums</li>
</ul>
<h3 id="2014"><a href="#2014" class="headerlink" title="2014"></a>2014</h3><h4 id="Round-A-5"><a href="#Round-A-5" class="headerlink" title="Round A"></a><a href="https://code.google.com/codejam/contest/3214486/dashboard" target="_blank" rel="noopener">Round A</a></h4><ul>
<li>Problem A. Seven-segment Display</li>
<li>Problem B. Super 2048</li>
<li>Problem C. Addition</li>
<li>Problem D. Cut Tiles</li>
</ul>
<h4 id="Round-B-5"><a href="#Round-B-5" class="headerlink" title="Round B"></a><a href="https://code.google.com/codejam/contest/4214486/dashboard" target="_blank" rel="noopener">Round B</a></h4><ul>
<li>Problem A. Password Attacker</li>
<li>Problem B. New Years Eve</li>
<li>Problem C. Card Game</li>
<li>Problem D. Parentheses Order</li>
</ul>
<h4 id="Round-C-5"><a href="#Round-C-5" class="headerlink" title="Round C"></a><a href="https://code.google.com/codejam/contest/5214486/dashboard" target="_blank" rel="noopener">Round C</a></h4><ul>
<li>Problem A. Minesweeper</li>
<li>Problem B. Taking Metro</li>
<li>Problem C. Broken Calculator</li>
<li>Problem D. Tetris</li>
</ul>
<h4 id="Round-D-5"><a href="#Round-D-5" class="headerlink" title="Round D"></a><a href="https://code.google.com/codejam/contest/6214486/dashboard" target="_blank" rel="noopener">Round D</a></h4><ul>
<li>Problem A. Cube IV</li>
<li>Problem B. GBus count</li>
<li>Problem C. Sort a scrambled itinerary</li>
<li>Problem D. Itz Chess</li>
</ul>
]]></content>
      <categories>
        <category>Algroithm</category>
        <category>Google</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Kickstart</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Weekly Contest 162解题记录</title>
    <url>/2019/11/16/Leetcode-Weekly-Contest-162%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>一个罚时没进200，有点难过。这次题目说实话都直接的。。</p>
<a id="more"></a>

<p><a href="https://github.com/Itachi666/AlgorithmWarehouse/tree/master/LeetcodeContest/WeeklyContest162" target="_blank" rel="noopener">代码在这里</a></p>
<h3 id="1252-Cells-with-Odd-Values-in-a-Matrix"><a href="#1252-Cells-with-Odd-Values-in-a-Matrix" class="headerlink" title="1252. Cells with Odd Values in a Matrix"></a>1252. Cells with Odd Values in a Matrix</h3><p><a href="https://leetcode.com/contest/weekly-contest-162/problems/cells-with-odd-values-in-a-matrix/" target="_blank" rel="noopener">题目</a> </p>
<p>提交次数：1/1</p>
<p>日常签到题，数据量比较小模拟就行了</p>
<p>不过也可以只统计行和列的计数情况，分别统计被增加偶数次和奇数次的行，以及被增加偶数次和奇数次的列，那么对应的 偶数行∗奇数列 和 奇数行∗偶数列 都可以被统计入结果，时间复杂度降为 $O(n)$</p>
<h3 id="1253-Reconstruct-a-2-Row-Binary-Matrix"><a href="#1253-Reconstruct-a-2-Row-Binary-Matrix" class="headerlink" title="1253. Reconstruct a 2-Row Binary Matrix"></a>1253. Reconstruct a 2-Row Binary Matrix</h3><p><a href="https://leetcode.com/contest/weekly-contest-162/problems/reconstruct-a-2-row-binary-matrix/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>交的时候不太确定，不过用贪心足够了。对0和2来说不用考虑什么，1的时候选多的那个减一就可以了。</p>
<p>不过最后没看见每一行数目必须正好对上upper和lower才行。。。</p>
<h3 id="1254-Number-of-Closed-Islands"><a href="#1254-Number-of-Closed-Islands" class="headerlink" title="1254. Number of Closed Islands"></a>1254. Number of Closed Islands</h3><p><a href="https://leetcode.com/contest/weekly-contest-162/problems/number-of-closed-islands/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>标准搜索题。直接bfs就行了。</p>
<h3 id="1255-Maximum-Score-Words-Formed-by-Letters"><a href="#1255-Maximum-Score-Words-Formed-by-Letters" class="headerlink" title="1255. Maximum Score Words Formed by Letters"></a>1255. Maximum Score Words Formed by Letters</h3><p><a href="https://leetcode.com/contest/weekly-contest-162/problems/maximum-score-words-formed-by-letters/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>dfs搜就行了。。。</p>
<p>数据量不大，考虑了几个优化点不知道用上了没有。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Weekly Contest 161解题记录</title>
    <url>/2019/11/03/Leetcode-Weekly-Contest-161%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>这回意外进前200了还是挺开心的（虽然是压线198），吃饭都香了2333</p>
<a id="more"></a>

<p><a href="https://github.com/Itachi666/AlgorithmWarehouse/tree/master/LeetcodeContest/WeeklyContest161" target="_blank" rel="noopener">代码在这里</a></p>
<h3 id="1247-Minimum-Swaps-to-Make-Strings-Equal"><a href="#1247-Minimum-Swaps-to-Make-Strings-Equal" class="headerlink" title="1247. Minimum Swaps to Make Strings Equal"></a>1247. Minimum Swaps to Make Strings Equal</h3><p><a href="https://leetcode.com/contest/weekly-contest-161/problems/minimum-swaps-to-make-strings-equal/" target="_blank" rel="noopener">题目</a> </p>
<p>提交次数：1/1</p>
<p>意外卡的最久，改了好几次思路。一开始以为只要统计出x和y的数量然后除以2就行了，后来发现不是。</p>
<p>总之纠结了一会发现只要首先找到若干的<code>xx</code>和<code>yy</code>对，最后看剩下的是不是个<code>xy&amp;yx</code>对即可。</p>
<h3 id="1248-Count-Number-of-Nice-Subarrays"><a href="#1248-Count-Number-of-Nice-Subarrays" class="headerlink" title="1248. Count Number of Nice Subarrays"></a>1248. Count Number of Nice Subarrays</h3><p><a href="https://leetcode.com/contest/weekly-contest-161/problems/count-number-of-nice-subarrays/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>这一题猛一看还觉得有点难，仔细一看k给定了那就挺水的了：把奇数位置存起来，然后用一个长度为k的窗口扫一遍，判断有多少个就可以了。</p>
<h3 id="1249-Minimum-Remove-to-Make-Valid-Parentheses"><a href="#1249-Minimum-Remove-to-Make-Valid-Parentheses" class="headerlink" title="1249. Minimum Remove to Make Valid Parentheses"></a>1249. Minimum Remove to Make Valid Parentheses</h3><p><a href="https://leetcode.com/contest/weekly-contest-161/problems/minimum-remove-to-make-valid-parentheses/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>括号匹配加强版。</p>
<p>匹配途中把多余的括号位置记录下来，然后在字符串中挨个删掉就行了。</p>
<h3 id="1250-Check-If-It-Is-a-Good-Array"><a href="#1250-Check-If-It-Is-a-Good-Array" class="headerlink" title="1250. Check If It Is a Good Array"></a>1250. Check If It Is a Good Array</h3><p><a href="https://leetcode.com/contest/weekly-contest-161/problems/check-if-it-is-a-good-array/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>一开始看见选择任意子集还有点吓人，感觉跟最大公约数相关就先写了个gcd上去，甚至还调试了调试浪费了几分钟。。。</p>
<p>然后一看就返回个bool，那不就是看全数组的最大公约数是不是1么。。。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Biweekly Contest 12解题记录</title>
    <url>/2019/11/03/Leetcode-Biweekly-Contest-12%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>最近两次的双周赛都做的不是很顺，在Q3上纠结了太久。</p>
<a id="more"></a>

<p><a href="https://github.com/Itachi666/AlgorithmWarehouse/tree/master/LeetcodeContest/BiweeklyContest12" target="_blank" rel="noopener">代码在这里</a></p>
<h3 id="1243-Array-Transformation"><a href="#1243-Array-Transformation" class="headerlink" title="1243. Array Transformation"></a>1243. Array Transformation</h3><p><a href="https://leetcode.com/contest/biweekly-contest-12/problems/array-transformation/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>签到题，然后就跪了emmm，一开始直接遍历数组然后判断操作的，结果发现前面的改动会影响后面就很难受。改成标记那些位置会改变，然后一起改就好了。</p>
<p>当然直接vector复制一个然后复制回去也可以，，，蠢了。</p>
<h3 id="1244-Design-A-Leaderboard"><a href="#1244-Design-A-Leaderboard" class="headerlink" title="1244. Design A Leaderboard"></a>1244. Design A Leaderboard</h3><p><a href="https://leetcode.com/contest/biweekly-contest-12/problems/design-a-leaderboard/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>这题目读的是真费劲。</p>
<p>第一眼感觉要用数据结构，结果不知道为什么觉得n2的算法不行，非要往下找。现在看看数据范围用n2暴力算法是完全够用的。。。</p>
<p>但用两个map来写是可以的，一开始想到了这个但是有一点没想通就搁着写后面的了。思路很简单：一个map来存每个人的成绩，第二个map来存成绩。靠map自带的有序属性来获取最大的K个成绩。</p>
<p>好像每个人的成绩用vector也够用了</p>
<h3 id="1245-Tree-Diameter"><a href="#1245-Tree-Diameter" class="headerlink" title="1245. Tree Diameter"></a>1245. Tree Diameter</h3><p><a href="https://leetcode.com/contest/biweekly-contest-12/problems/tree-diameter/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/5</p>
<p>看评论说是模版题，就有点尴尬了。</p>
<p>最开始写dfs暴力搜索每个叶子节点的最长，想了半天怎么去重也没去掉，最后果不其然超时了，关键超时就算了还试图优化一下想混过去。。。5min啊5min</p>
<p>后来转换了一下思路，每一轮中扫描所有的节点，每一次把叶子节点删掉，删到只剩下一个或者两个节点为止，这时的轮数就是他的半径。</p>
<p>当然dfs其实也是可以的，参考了一下大佬的方法， 思路很简单：找到距离0号节点最远的节点，然后从这个节点出发找到距离这个节点的最远节点，就是直径。</p>
<p>这个思路就好很多，想了想哪怕这是个图也可以解决。</p>
<p>附代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; w;</span><br><span class="line">    pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; best;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> par, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        best = <span class="built_in">max</span>(best, make_pair(len, a));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> b : w[a])&#123; </span><br><span class="line">            <span class="keyword">if</span>(b != par) &#123;</span><br><span class="line">                dfs(b, a, len + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">treeDiameter</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = (<span class="keyword">int</span>) edges.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">        w.<span class="built_in">clear</span>();</span><br><span class="line">        w.resize(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> a = edges[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> b = edges[i][<span class="number">1</span>];</span><br><span class="line">            w[a].push_back(b);</span><br><span class="line">            w[b].push_back(a);</span><br><span class="line">        &#125;</span><br><span class="line">        best = &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> from = best.second;</span><br><span class="line">        best = &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        dfs(from, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> best.first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="1246-Palindrome-Removal"><a href="#1246-Palindrome-Removal" class="headerlink" title="1246. Palindrome Removal"></a>1246. Palindrome Removal</h3><p><a href="https://leetcode.com/contest/biweekly-contest-12/problems/palindrome-removal/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：0/0</p>
<p>区间dp还是不太熟练。</p>
<p>第三题浪费了太久，到第四题的时候时间已经不多了，看见数据范围100鬼使神差的就想搞个四重循环，当时都觉得自己失了智。</p>
<p>其实有点被题目误导，想法是这样的：首先两层循环确定区间长度和区间首尾，然后枚举内部区间，判断把这个区间删了之后剩下的是不是个回文串。</p>
<p>emmmm总之没调出来，后来还是参考了一下题解才搞定的：</p>
<p>其实就是个比较标准的区间dp，把一个区间拆成两个区间就可以了，然后判断一下首尾是否相同即可。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Weekly Contest 160解题记录</title>
    <url>/2019/10/27/Leetcode-Weekly-Contest-160%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>这次数据范围是真的小。另外因为第四题太蠢意外进了前200。。。。</p>
<a id="more"></a>

<p><a href="https://github.com/Itachi666/AlgorithmWarehouse/tree/master/LeetcodeContest/WeeklyContest160" target="_blank" rel="noopener">题解代码</a></p>
<h3 id="1237-Find-Positive-Integer-Solution-for-a-Given-Equation"><a href="#1237-Find-Positive-Integer-Solution-for-a-Given-Equation" class="headerlink" title="1237.  Find Positive Integer Solution for a Given Equation"></a>1237.  Find Positive Integer Solution for a Given Equation</h3><p><a href="https://leetcode.com/contest/weekly-contest-160/problems/find-positive-integer-solution-for-a-given-equation/" target="_blank" rel="noopener">题目</a> </p>
<p>提交次数：1/1</p>
<p>签到题，一个二维单调函数<code>f(x,y)</code>找出所有<code>f(x,y)=z</code>的输入<code>(x,y)</code>，其实提高效率对每个x，二分y就可以了应该。但范围实在太小就直接暴力了。。</p>
<h3 id="1238-Circular-Permutation-in-Binary-Representation"><a href="#1238-Circular-Permutation-in-Binary-Representation" class="headerlink" title="1238.  Circular Permutation in Binary Representation"></a>1238.  Circular Permutation in Binary Representation</h3><p><a href="https://leetcode.com/contest/weekly-contest-160/problems/circular-permutation-in-binary-representation/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/1</p>
<p>参见leetcode的<a href="https://leetcode.com/problems/gray-code/" target="_blank" rel="noopener">第89题</a>，找到这样的顺序之后把输入的start提前到最开始就可以了。</p>
<p>人生就是一个环hhh</p>
<h3 id="1239-Replace-the-Substring-for-Balanced-String"><a href="#1239-Replace-the-Substring-for-Balanced-String" class="headerlink" title="1239. Replace the Substring for Balanced String"></a>1239. Replace the Substring for Balanced String</h3><p><a href="https://leetcode.com/contest/weekly-contest-160/problems/maximum-length-of-a-concatenated-string-with-unique-characters/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>数据范围太小了，总共就16个，不暴力实在不是人。。</p>
<p>被坑了一次，没考虑到一个字符串内部可能就会有重复。</p>
<h3 id="1240-Tiling-a-Rectangle-with-the-Fewest-Squares"><a href="#1240-Tiling-a-Rectangle-with-the-Fewest-Squares" class="headerlink" title="1240. Tiling a Rectangle with the Fewest Squares"></a>1240. Tiling a Rectangle with the Fewest Squares</h3><p><a href="https://leetcode.com/contest/weekly-contest-160/problems/tiling-a-rectangle-with-the-fewest-squares/" target="_blank" rel="noopener">题目</a></p>
<p>提交次数：1/2</p>
<p>目前做过的最蠢的第四题。。前面那一堆骗分的你们好意思么。</p>
<p>看起来是个dp，实际也是dp，但是测试样例非要搞个幺蛾子让人觉得不是dp。</p>
<p>但实际上就是dp，最后那个测试样例是个特例，就是误导人的emmm从结果上来看这个误导效果真的很好。。。</p>
]]></content>
      <categories>
        <category>Algroithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/09/19/Hello-world-hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
 <a id="more"></a> 

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
</search>
